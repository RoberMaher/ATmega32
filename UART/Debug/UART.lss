
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  000023fc  00002490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000c0  008000c0  000024f0  2**0
                  ALLOC
  3 .stab         00001e9c  00000000  00000000  000024f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001272  00000000  00000000  0000438c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000055fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000573e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000058ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000074f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000083e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009190  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000092f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000957d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009d4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 eb 10 	jmp	0x21d6	; 0x21d6 <__vector_13>
      38:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__vector_14>
      3c:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3c       	cpi	r26, 0xC0	; 192
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ec       	ldi	r26, 0xC0	; 192
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3c       	cpi	r26, 0xC6	; 198
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 eb       	ldi	r26, 0xB7	; 183
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 eb       	ldi	r24, 0xB7	; 183
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f1 11 	jmp	0x23e2	; 0x23e2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:


#define F_CPU 8000000UL

int main ()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidInit();
     b50:	0e 94 a7 09 	call	0x134e	; 0x134e <MDIO_voidInit>
	MUART_voidInit();
     b54:	0e 94 77 0f 	call	0x1eee	; 0x1eee <MUART_voidInit>

	u8 local_u8ReceivedData=255;
     b58:	8f ef       	ldi	r24, 0xFF	; 255
     b5a:	89 83       	std	Y+1, r24	; 0x01

	MUART_voidSendStringSyncNonBlocking("To Turn ON the LED Press o or O\r\nTo Turn OFF the LED Press f or F\r\n");
     b5c:	80 e6       	ldi	r24, 0x60	; 96
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	0e 94 4d 10 	call	0x209a	; 0x209a <MUART_voidSendStringSyncNonBlocking>
	while(1)
	{
		local_u8ReceivedData = MUART_u8ReadByteSyncBlocking();
     b64:	0e 94 84 10 	call	0x2108	; 0x2108 <MUART_u8ReadByteSyncBlocking>
     b68:	89 83       	std	Y+1, r24	; 0x01
		if ((local_u8ReceivedData == 'o') || (local_u8ReceivedData == 'O'))
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	8f 36       	cpi	r24, 0x6F	; 111
     b6e:	19 f0       	breq	.+6      	; 0xb76 <main+0x30>
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	8f 34       	cpi	r24, 0x4F	; 79
     b74:	49 f4       	brne	.+18     	; 0xb88 <main+0x42>
		{
			HLED_voidTurnOn(DIO_PORTA, PIN0);
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <HLED_voidTurnOn>
			MUART_voidSendStringSyncNonBlocking("LED ON\r\n");
     b7e:	84 ea       	ldi	r24, 0xA4	; 164
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 4d 10 	call	0x209a	; 0x209a <MUART_voidSendStringSyncNonBlocking>
     b86:	ee cf       	rjmp	.-36     	; 0xb64 <main+0x1e>
		}
		else if ((local_u8ReceivedData == 'f') || (local_u8ReceivedData == 'F'))
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	86 36       	cpi	r24, 0x66	; 102
     b8c:	19 f0       	breq	.+6      	; 0xb94 <main+0x4e>
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	86 34       	cpi	r24, 0x46	; 70
     b92:	41 f7       	brne	.-48     	; 0xb64 <main+0x1e>
		{
			HLED_voidTurnOff(DIO_PORTA, PIN0);
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <HLED_voidTurnOff>
			MUART_voidSendStringSyncNonBlocking("LED OFF\r\n");
     b9c:	8d ea       	ldi	r24, 0xAD	; 173
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 4d 10 	call	0x209a	; 0x209a <MUART_voidSendStringSyncNonBlocking>
     ba4:	df cf       	rjmp	.-66     	; 0xb64 <main+0x1e>

00000ba6 <MDIO_voidSetPinDirection>:
#include "../Include/MCAL/DIO/DIO_Cfg.h"

#define F_CPU 8000000UL

void MDIO_voidSetPinDirection (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID, DIO_DIRECTION_e A_PINDirection)
{
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	2d 97       	sbiw	r28, 0x0d	; 13
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	cd bf       	out	0x3d, r28	; 61
     bba:	89 83       	std	Y+1, r24	; 0x01
     bbc:	6a 83       	std	Y+2, r22	; 0x02
     bbe:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ((A_DIOPort <= DIO_PORTD) && (A_PINID <= PIN7) && (A_PINDirection <= DIO_OUTPUT))
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	84 30       	cpi	r24, 0x04	; 4
     bc4:	08 f0       	brcs	.+2      	; 0xbc8 <MDIO_voidSetPinDirection+0x22>
     bc6:	09 c1       	rjmp	.+530    	; 0xdda <MDIO_voidSetPinDirection+0x234>
     bc8:	8a 81       	ldd	r24, Y+2	; 0x02
     bca:	88 30       	cpi	r24, 0x08	; 8
     bcc:	08 f0       	brcs	.+2      	; 0xbd0 <MDIO_voidSetPinDirection+0x2a>
     bce:	05 c1       	rjmp	.+522    	; 0xdda <MDIO_voidSetPinDirection+0x234>
     bd0:	8b 81       	ldd	r24, Y+3	; 0x03
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	08 f0       	brcs	.+2      	; 0xbd8 <MDIO_voidSetPinDirection+0x32>
     bd6:	01 c1       	rjmp	.+514    	; 0xdda <MDIO_voidSetPinDirection+0x234>
	{
		switch (A_DIOPort)
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	28 2f       	mov	r18, r24
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	3d 87       	std	Y+13, r19	; 0x0d
     be0:	2c 87       	std	Y+12, r18	; 0x0c
     be2:	8c 85       	ldd	r24, Y+12	; 0x0c
     be4:	9d 85       	ldd	r25, Y+13	; 0x0d
     be6:	81 30       	cpi	r24, 0x01	; 1
     be8:	91 05       	cpc	r25, r1
     bea:	09 f4       	brne	.+2      	; 0xbee <MDIO_voidSetPinDirection+0x48>
     bec:	4f c0       	rjmp	.+158    	; 0xc8c <MDIO_voidSetPinDirection+0xe6>
     bee:	2c 85       	ldd	r18, Y+12	; 0x0c
     bf0:	3d 85       	ldd	r19, Y+13	; 0x0d
     bf2:	22 30       	cpi	r18, 0x02	; 2
     bf4:	31 05       	cpc	r19, r1
     bf6:	2c f4       	brge	.+10     	; 0xc02 <MDIO_voidSetPinDirection+0x5c>
     bf8:	8c 85       	ldd	r24, Y+12	; 0x0c
     bfa:	9d 85       	ldd	r25, Y+13	; 0x0d
     bfc:	00 97       	sbiw	r24, 0x00	; 0
     bfe:	71 f0       	breq	.+28     	; 0xc1c <MDIO_voidSetPinDirection+0x76>
     c00:	ec c0       	rjmp	.+472    	; 0xdda <MDIO_voidSetPinDirection+0x234>
     c02:	2c 85       	ldd	r18, Y+12	; 0x0c
     c04:	3d 85       	ldd	r19, Y+13	; 0x0d
     c06:	22 30       	cpi	r18, 0x02	; 2
     c08:	31 05       	cpc	r19, r1
     c0a:	09 f4       	brne	.+2      	; 0xc0e <MDIO_voidSetPinDirection+0x68>
     c0c:	77 c0       	rjmp	.+238    	; 0xcfc <MDIO_voidSetPinDirection+0x156>
     c0e:	8c 85       	ldd	r24, Y+12	; 0x0c
     c10:	9d 85       	ldd	r25, Y+13	; 0x0d
     c12:	83 30       	cpi	r24, 0x03	; 3
     c14:	91 05       	cpc	r25, r1
     c16:	09 f4       	brne	.+2      	; 0xc1a <MDIO_voidSetPinDirection+0x74>
     c18:	a9 c0       	rjmp	.+338    	; 0xd6c <MDIO_voidSetPinDirection+0x1c6>
     c1a:	df c0       	rjmp	.+446    	; 0xdda <MDIO_voidSetPinDirection+0x234>
		{
		case DIO_PORTA:
			switch (A_PINDirection)
     c1c:	8b 81       	ldd	r24, Y+3	; 0x03
     c1e:	28 2f       	mov	r18, r24
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	3b 87       	std	Y+11, r19	; 0x0b
     c24:	2a 87       	std	Y+10, r18	; 0x0a
     c26:	8a 85       	ldd	r24, Y+10	; 0x0a
     c28:	9b 85       	ldd	r25, Y+11	; 0x0b
     c2a:	00 97       	sbiw	r24, 0x00	; 0
     c2c:	31 f0       	breq	.+12     	; 0xc3a <MDIO_voidSetPinDirection+0x94>
     c2e:	2a 85       	ldd	r18, Y+10	; 0x0a
     c30:	3b 85       	ldd	r19, Y+11	; 0x0b
     c32:	21 30       	cpi	r18, 0x01	; 1
     c34:	31 05       	cpc	r19, r1
     c36:	b1 f0       	breq	.+44     	; 0xc64 <MDIO_voidSetPinDirection+0xbe>
     c38:	d0 c0       	rjmp	.+416    	; 0xdda <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRA_REG,A_PINID);
     c3a:	aa e3       	ldi	r26, 0x3A	; 58
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	ea e3       	ldi	r30, 0x3A	; 58
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	48 2f       	mov	r20, r24
     c46:	8a 81       	ldd	r24, Y+2	; 0x02
     c48:	28 2f       	mov	r18, r24
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	02 2e       	mov	r0, r18
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <MDIO_voidSetPinDirection+0xb2>
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	0a 94       	dec	r0
     c5a:	e2 f7       	brpl	.-8      	; 0xc54 <MDIO_voidSetPinDirection+0xae>
     c5c:	80 95       	com	r24
     c5e:	84 23       	and	r24, r20
     c60:	8c 93       	st	X, r24
     c62:	bb c0       	rjmp	.+374    	; 0xdda <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRA_REG,A_PINID);
     c64:	aa e3       	ldi	r26, 0x3A	; 58
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	ea e3       	ldi	r30, 0x3A	; 58
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <MDIO_voidSetPinDirection+0xdc>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <MDIO_voidSetPinDirection+0xd8>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	a7 c0       	rjmp	.+334    	; 0xdda <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTB:
			switch (A_PINDirection)
     c8c:	8b 81       	ldd	r24, Y+3	; 0x03
     c8e:	28 2f       	mov	r18, r24
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	39 87       	std	Y+9, r19	; 0x09
     c94:	28 87       	std	Y+8, r18	; 0x08
     c96:	88 85       	ldd	r24, Y+8	; 0x08
     c98:	99 85       	ldd	r25, Y+9	; 0x09
     c9a:	00 97       	sbiw	r24, 0x00	; 0
     c9c:	31 f0       	breq	.+12     	; 0xcaa <MDIO_voidSetPinDirection+0x104>
     c9e:	28 85       	ldd	r18, Y+8	; 0x08
     ca0:	39 85       	ldd	r19, Y+9	; 0x09
     ca2:	21 30       	cpi	r18, 0x01	; 1
     ca4:	31 05       	cpc	r19, r1
     ca6:	b1 f0       	breq	.+44     	; 0xcd4 <MDIO_voidSetPinDirection+0x12e>
     ca8:	98 c0       	rjmp	.+304    	; 0xdda <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRB_REG,A_PINID);
     caa:	a7 e3       	ldi	r26, 0x37	; 55
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e7 e3       	ldi	r30, 0x37	; 55
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	48 2f       	mov	r20, r24
     cb6:	8a 81       	ldd	r24, Y+2	; 0x02
     cb8:	28 2f       	mov	r18, r24
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	02 2e       	mov	r0, r18
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <MDIO_voidSetPinDirection+0x122>
     cc4:	88 0f       	add	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	0a 94       	dec	r0
     cca:	e2 f7       	brpl	.-8      	; 0xcc4 <MDIO_voidSetPinDirection+0x11e>
     ccc:	80 95       	com	r24
     cce:	84 23       	and	r24, r20
     cd0:	8c 93       	st	X, r24
     cd2:	83 c0       	rjmp	.+262    	; 0xdda <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRB_REG,A_PINID);
     cd4:	a7 e3       	ldi	r26, 0x37	; 55
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e7 e3       	ldi	r30, 0x37	; 55
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 2e       	mov	r0, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <MDIO_voidSetPinDirection+0x14c>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <MDIO_voidSetPinDirection+0x148>
     cf6:	84 2b       	or	r24, r20
     cf8:	8c 93       	st	X, r24
     cfa:	6f c0       	rjmp	.+222    	; 0xdda <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTC:
			switch (A_PINDirection)
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	3f 83       	std	Y+7, r19	; 0x07
     d04:	2e 83       	std	Y+6, r18	; 0x06
     d06:	8e 81       	ldd	r24, Y+6	; 0x06
     d08:	9f 81       	ldd	r25, Y+7	; 0x07
     d0a:	00 97       	sbiw	r24, 0x00	; 0
     d0c:	31 f0       	breq	.+12     	; 0xd1a <MDIO_voidSetPinDirection+0x174>
     d0e:	2e 81       	ldd	r18, Y+6	; 0x06
     d10:	3f 81       	ldd	r19, Y+7	; 0x07
     d12:	21 30       	cpi	r18, 0x01	; 1
     d14:	31 05       	cpc	r19, r1
     d16:	b1 f0       	breq	.+44     	; 0xd44 <MDIO_voidSetPinDirection+0x19e>
     d18:	60 c0       	rjmp	.+192    	; 0xdda <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRC_REG,A_PINID);
     d1a:	a4 e3       	ldi	r26, 0x34	; 52
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e4 e3       	ldi	r30, 0x34	; 52
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	48 2f       	mov	r20, r24
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	28 2f       	mov	r18, r24
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	02 2e       	mov	r0, r18
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <MDIO_voidSetPinDirection+0x192>
     d34:	88 0f       	add	r24, r24
     d36:	99 1f       	adc	r25, r25
     d38:	0a 94       	dec	r0
     d3a:	e2 f7       	brpl	.-8      	; 0xd34 <MDIO_voidSetPinDirection+0x18e>
     d3c:	80 95       	com	r24
     d3e:	84 23       	and	r24, r20
     d40:	8c 93       	st	X, r24
     d42:	4b c0       	rjmp	.+150    	; 0xdda <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRC_REG,A_PINID);
     d44:	a4 e3       	ldi	r26, 0x34	; 52
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e4 e3       	ldi	r30, 0x34	; 52
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	48 2f       	mov	r20, r24
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	28 2f       	mov	r18, r24
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	02 2e       	mov	r0, r18
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <MDIO_voidSetPinDirection+0x1bc>
     d5e:	88 0f       	add	r24, r24
     d60:	99 1f       	adc	r25, r25
     d62:	0a 94       	dec	r0
     d64:	e2 f7       	brpl	.-8      	; 0xd5e <MDIO_voidSetPinDirection+0x1b8>
     d66:	84 2b       	or	r24, r20
     d68:	8c 93       	st	X, r24
     d6a:	37 c0       	rjmp	.+110    	; 0xdda <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTD:
			switch (A_PINDirection)
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	3d 83       	std	Y+5, r19	; 0x05
     d74:	2c 83       	std	Y+4, r18	; 0x04
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	31 f0       	breq	.+12     	; 0xd8a <MDIO_voidSetPinDirection+0x1e4>
     d7e:	2c 81       	ldd	r18, Y+4	; 0x04
     d80:	3d 81       	ldd	r19, Y+5	; 0x05
     d82:	21 30       	cpi	r18, 0x01	; 1
     d84:	31 05       	cpc	r19, r1
     d86:	b1 f0       	breq	.+44     	; 0xdb4 <MDIO_voidSetPinDirection+0x20e>
     d88:	28 c0       	rjmp	.+80     	; 0xdda <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRD_REG,A_PINID);
     d8a:	a1 e3       	ldi	r26, 0x31	; 49
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e1 e3       	ldi	r30, 0x31	; 49
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <MDIO_voidSetPinDirection+0x202>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <MDIO_voidSetPinDirection+0x1fe>
     dac:	80 95       	com	r24
     dae:	84 23       	and	r24, r20
     db0:	8c 93       	st	X, r24
     db2:	13 c0       	rjmp	.+38     	; 0xdda <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRD_REG,A_PINID);
     db4:	a1 e3       	ldi	r26, 0x31	; 49
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e1 e3       	ldi	r30, 0x31	; 49
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	48 2f       	mov	r20, r24
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	02 2e       	mov	r0, r18
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <MDIO_voidSetPinDirection+0x22c>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	0a 94       	dec	r0
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <MDIO_voidSetPinDirection+0x228>
     dd6:	84 2b       	or	r24, r20
     dd8:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
     dda:	2d 96       	adiw	r28, 0x0d	; 13
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	f8 94       	cli
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	cd bf       	out	0x3d, r28	; 61
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <MDIO_voidSetPinValue>:


void MDIO_voidSetPinValue (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID, DIO_VALUE_e A_PINValue)
{
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	2d 97       	sbiw	r28, 0x0d	; 13
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	89 83       	std	Y+1, r24	; 0x01
     e02:	6a 83       	std	Y+2, r22	; 0x02
     e04:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ((A_DIOPort <= DIO_PORTD) && (A_PINID <= PIN7) && (A_PINValue <= DIO_SET))
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	84 30       	cpi	r24, 0x04	; 4
     e0a:	08 f0       	brcs	.+2      	; 0xe0e <MDIO_voidSetPinValue+0x22>
     e0c:	09 c1       	rjmp	.+530    	; 0x1020 <MDIO_voidSetPinValue+0x234>
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	88 30       	cpi	r24, 0x08	; 8
     e12:	08 f0       	brcs	.+2      	; 0xe16 <MDIO_voidSetPinValue+0x2a>
     e14:	05 c1       	rjmp	.+522    	; 0x1020 <MDIO_voidSetPinValue+0x234>
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	82 30       	cpi	r24, 0x02	; 2
     e1a:	08 f0       	brcs	.+2      	; 0xe1e <MDIO_voidSetPinValue+0x32>
     e1c:	01 c1       	rjmp	.+514    	; 0x1020 <MDIO_voidSetPinValue+0x234>
	{
		switch (A_DIOPort)
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	3d 87       	std	Y+13, r19	; 0x0d
     e26:	2c 87       	std	Y+12, r18	; 0x0c
     e28:	8c 85       	ldd	r24, Y+12	; 0x0c
     e2a:	9d 85       	ldd	r25, Y+13	; 0x0d
     e2c:	81 30       	cpi	r24, 0x01	; 1
     e2e:	91 05       	cpc	r25, r1
     e30:	09 f4       	brne	.+2      	; 0xe34 <MDIO_voidSetPinValue+0x48>
     e32:	4f c0       	rjmp	.+158    	; 0xed2 <MDIO_voidSetPinValue+0xe6>
     e34:	2c 85       	ldd	r18, Y+12	; 0x0c
     e36:	3d 85       	ldd	r19, Y+13	; 0x0d
     e38:	22 30       	cpi	r18, 0x02	; 2
     e3a:	31 05       	cpc	r19, r1
     e3c:	2c f4       	brge	.+10     	; 0xe48 <MDIO_voidSetPinValue+0x5c>
     e3e:	8c 85       	ldd	r24, Y+12	; 0x0c
     e40:	9d 85       	ldd	r25, Y+13	; 0x0d
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	71 f0       	breq	.+28     	; 0xe62 <MDIO_voidSetPinValue+0x76>
     e46:	ec c0       	rjmp	.+472    	; 0x1020 <MDIO_voidSetPinValue+0x234>
     e48:	2c 85       	ldd	r18, Y+12	; 0x0c
     e4a:	3d 85       	ldd	r19, Y+13	; 0x0d
     e4c:	22 30       	cpi	r18, 0x02	; 2
     e4e:	31 05       	cpc	r19, r1
     e50:	09 f4       	brne	.+2      	; 0xe54 <MDIO_voidSetPinValue+0x68>
     e52:	77 c0       	rjmp	.+238    	; 0xf42 <MDIO_voidSetPinValue+0x156>
     e54:	8c 85       	ldd	r24, Y+12	; 0x0c
     e56:	9d 85       	ldd	r25, Y+13	; 0x0d
     e58:	83 30       	cpi	r24, 0x03	; 3
     e5a:	91 05       	cpc	r25, r1
     e5c:	09 f4       	brne	.+2      	; 0xe60 <MDIO_voidSetPinValue+0x74>
     e5e:	a9 c0       	rjmp	.+338    	; 0xfb2 <MDIO_voidSetPinValue+0x1c6>
     e60:	df c0       	rjmp	.+446    	; 0x1020 <MDIO_voidSetPinValue+0x234>
		{
		case DIO_PORTA:
			switch (A_PINValue)
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	3b 87       	std	Y+11, r19	; 0x0b
     e6a:	2a 87       	std	Y+10, r18	; 0x0a
     e6c:	8a 85       	ldd	r24, Y+10	; 0x0a
     e6e:	9b 85       	ldd	r25, Y+11	; 0x0b
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	31 f0       	breq	.+12     	; 0xe80 <MDIO_voidSetPinValue+0x94>
     e74:	2a 85       	ldd	r18, Y+10	; 0x0a
     e76:	3b 85       	ldd	r19, Y+11	; 0x0b
     e78:	21 30       	cpi	r18, 0x01	; 1
     e7a:	31 05       	cpc	r19, r1
     e7c:	b1 f0       	breq	.+44     	; 0xeaa <MDIO_voidSetPinValue+0xbe>
     e7e:	d0 c0       	rjmp	.+416    	; 0x1020 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTA_REG,A_PINID);
     e80:	ab e3       	ldi	r26, 0x3B	; 59
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	eb e3       	ldi	r30, 0x3B	; 59
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	48 2f       	mov	r20, r24
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	02 2e       	mov	r0, r18
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <MDIO_voidSetPinValue+0xb2>
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	0a 94       	dec	r0
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <MDIO_voidSetPinValue+0xae>
     ea2:	80 95       	com	r24
     ea4:	84 23       	and	r24, r20
     ea6:	8c 93       	st	X, r24
     ea8:	bb c0       	rjmp	.+374    	; 0x1020 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTA_REG,A_PINID);
     eaa:	ab e3       	ldi	r26, 0x3B	; 59
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	eb e3       	ldi	r30, 0x3B	; 59
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	48 2f       	mov	r20, r24
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 2e       	mov	r0, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <MDIO_voidSetPinValue+0xdc>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <MDIO_voidSetPinValue+0xd8>
     ecc:	84 2b       	or	r24, r20
     ece:	8c 93       	st	X, r24
     ed0:	a7 c0       	rjmp	.+334    	; 0x1020 <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTB:
			switch (A_PINValue)
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	39 87       	std	Y+9, r19	; 0x09
     eda:	28 87       	std	Y+8, r18	; 0x08
     edc:	88 85       	ldd	r24, Y+8	; 0x08
     ede:	99 85       	ldd	r25, Y+9	; 0x09
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	31 f0       	breq	.+12     	; 0xef0 <MDIO_voidSetPinValue+0x104>
     ee4:	28 85       	ldd	r18, Y+8	; 0x08
     ee6:	39 85       	ldd	r19, Y+9	; 0x09
     ee8:	21 30       	cpi	r18, 0x01	; 1
     eea:	31 05       	cpc	r19, r1
     eec:	b1 f0       	breq	.+44     	; 0xf1a <MDIO_voidSetPinValue+0x12e>
     eee:	98 c0       	rjmp	.+304    	; 0x1020 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTB_REG,A_PINID);
     ef0:	a8 e3       	ldi	r26, 0x38	; 56
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e8 e3       	ldi	r30, 0x38	; 56
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	48 2f       	mov	r20, r24
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	02 2e       	mov	r0, r18
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <MDIO_voidSetPinValue+0x122>
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	0a 94       	dec	r0
     f10:	e2 f7       	brpl	.-8      	; 0xf0a <MDIO_voidSetPinValue+0x11e>
     f12:	80 95       	com	r24
     f14:	84 23       	and	r24, r20
     f16:	8c 93       	st	X, r24
     f18:	83 c0       	rjmp	.+262    	; 0x1020 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTB_REG,A_PINID);
     f1a:	a8 e3       	ldi	r26, 0x38	; 56
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e8 e3       	ldi	r30, 0x38	; 56
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	48 2f       	mov	r20, r24
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	02 2e       	mov	r0, r18
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <MDIO_voidSetPinValue+0x14c>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	0a 94       	dec	r0
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <MDIO_voidSetPinValue+0x148>
     f3c:	84 2b       	or	r24, r20
     f3e:	8c 93       	st	X, r24
     f40:	6f c0       	rjmp	.+222    	; 0x1020 <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTC:
			switch (A_PINValue)
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	3f 83       	std	Y+7, r19	; 0x07
     f4a:	2e 83       	std	Y+6, r18	; 0x06
     f4c:	8e 81       	ldd	r24, Y+6	; 0x06
     f4e:	9f 81       	ldd	r25, Y+7	; 0x07
     f50:	00 97       	sbiw	r24, 0x00	; 0
     f52:	31 f0       	breq	.+12     	; 0xf60 <MDIO_voidSetPinValue+0x174>
     f54:	2e 81       	ldd	r18, Y+6	; 0x06
     f56:	3f 81       	ldd	r19, Y+7	; 0x07
     f58:	21 30       	cpi	r18, 0x01	; 1
     f5a:	31 05       	cpc	r19, r1
     f5c:	b1 f0       	breq	.+44     	; 0xf8a <MDIO_voidSetPinValue+0x19e>
     f5e:	60 c0       	rjmp	.+192    	; 0x1020 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTC_REG,A_PINID);
     f60:	a5 e3       	ldi	r26, 0x35	; 53
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e5 e3       	ldi	r30, 0x35	; 53
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	48 2f       	mov	r20, r24
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	02 2e       	mov	r0, r18
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <MDIO_voidSetPinValue+0x192>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	0a 94       	dec	r0
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <MDIO_voidSetPinValue+0x18e>
     f82:	80 95       	com	r24
     f84:	84 23       	and	r24, r20
     f86:	8c 93       	st	X, r24
     f88:	4b c0       	rjmp	.+150    	; 0x1020 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTC_REG,A_PINID);
     f8a:	a5 e3       	ldi	r26, 0x35	; 53
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e5 e3       	ldi	r30, 0x35	; 53
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 2e       	mov	r0, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <MDIO_voidSetPinValue+0x1bc>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <MDIO_voidSetPinValue+0x1b8>
     fac:	84 2b       	or	r24, r20
     fae:	8c 93       	st	X, r24
     fb0:	37 c0       	rjmp	.+110    	; 0x1020 <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTD:
			switch (A_PINValue)
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	3d 83       	std	Y+5, r19	; 0x05
     fba:	2c 83       	std	Y+4, r18	; 0x04
     fbc:	8c 81       	ldd	r24, Y+4	; 0x04
     fbe:	9d 81       	ldd	r25, Y+5	; 0x05
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	31 f0       	breq	.+12     	; 0xfd0 <MDIO_voidSetPinValue+0x1e4>
     fc4:	2c 81       	ldd	r18, Y+4	; 0x04
     fc6:	3d 81       	ldd	r19, Y+5	; 0x05
     fc8:	21 30       	cpi	r18, 0x01	; 1
     fca:	31 05       	cpc	r19, r1
     fcc:	b1 f0       	breq	.+44     	; 0xffa <MDIO_voidSetPinValue+0x20e>
     fce:	28 c0       	rjmp	.+80     	; 0x1020 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTD_REG,A_PINID);
     fd0:	a2 e3       	ldi	r26, 0x32	; 50
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e2 e3       	ldi	r30, 0x32	; 50
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 2e       	mov	r0, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <MDIO_voidSetPinValue+0x202>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <MDIO_voidSetPinValue+0x1fe>
     ff2:	80 95       	com	r24
     ff4:	84 23       	and	r24, r20
     ff6:	8c 93       	st	X, r24
     ff8:	13 c0       	rjmp	.+38     	; 0x1020 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTD_REG,A_PINID);
     ffa:	a2 e3       	ldi	r26, 0x32	; 50
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e2 e3       	ldi	r30, 0x32	; 50
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <MDIO_voidSetPinValue+0x22c>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <MDIO_voidSetPinValue+0x228>
    101c:	84 2b       	or	r24, r20
    101e:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    1020:	2d 96       	adiw	r28, 0x0d	; 13
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <MDIO_GetPinValue>:


DIO_VALUE_e MDIO_GetPinValue (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	00 d0       	rcall	.+0      	; 0x1038 <MDIO_GetPinValue+0x6>
    1038:	00 d0       	rcall	.+0      	; 0x103a <MDIO_GetPinValue+0x8>
    103a:	0f 92       	push	r0
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	8a 83       	std	Y+2, r24	; 0x02
    1042:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE_e local_PINValue;
	if ((A_DIOPort <= DIO_PORTD) && (A_PINID <= PIN7))
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	84 30       	cpi	r24, 0x04	; 4
    1048:	08 f0       	brcs	.+2      	; 0x104c <MDIO_GetPinValue+0x1a>
    104a:	6b c0       	rjmp	.+214    	; 0x1122 <MDIO_GetPinValue+0xf0>
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	88 30       	cpi	r24, 0x08	; 8
    1050:	08 f0       	brcs	.+2      	; 0x1054 <MDIO_GetPinValue+0x22>
    1052:	67 c0       	rjmp	.+206    	; 0x1122 <MDIO_GetPinValue+0xf0>
	{
		switch (A_DIOPort)
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	3d 83       	std	Y+5, r19	; 0x05
    105c:	2c 83       	std	Y+4, r18	; 0x04
    105e:	4c 81       	ldd	r20, Y+4	; 0x04
    1060:	5d 81       	ldd	r21, Y+5	; 0x05
    1062:	41 30       	cpi	r20, 0x01	; 1
    1064:	51 05       	cpc	r21, r1
    1066:	41 f1       	breq	.+80     	; 0x10b8 <MDIO_GetPinValue+0x86>
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	9d 81       	ldd	r25, Y+5	; 0x05
    106c:	82 30       	cpi	r24, 0x02	; 2
    106e:	91 05       	cpc	r25, r1
    1070:	34 f4       	brge	.+12     	; 0x107e <MDIO_GetPinValue+0x4c>
    1072:	2c 81       	ldd	r18, Y+4	; 0x04
    1074:	3d 81       	ldd	r19, Y+5	; 0x05
    1076:	21 15       	cp	r18, r1
    1078:	31 05       	cpc	r19, r1
    107a:	61 f0       	breq	.+24     	; 0x1094 <MDIO_GetPinValue+0x62>
    107c:	52 c0       	rjmp	.+164    	; 0x1122 <MDIO_GetPinValue+0xf0>
    107e:	4c 81       	ldd	r20, Y+4	; 0x04
    1080:	5d 81       	ldd	r21, Y+5	; 0x05
    1082:	42 30       	cpi	r20, 0x02	; 2
    1084:	51 05       	cpc	r21, r1
    1086:	51 f1       	breq	.+84     	; 0x10dc <MDIO_GetPinValue+0xaa>
    1088:	8c 81       	ldd	r24, Y+4	; 0x04
    108a:	9d 81       	ldd	r25, Y+5	; 0x05
    108c:	83 30       	cpi	r24, 0x03	; 3
    108e:	91 05       	cpc	r25, r1
    1090:	b9 f1       	breq	.+110    	; 0x1100 <MDIO_GetPinValue+0xce>
    1092:	47 c0       	rjmp	.+142    	; 0x1122 <MDIO_GetPinValue+0xf0>
		{
		case DIO_PORTA:
			local_PINValue = GET_BIT(PINA_REG,A_PINID);
    1094:	e9 e3       	ldi	r30, 0x39	; 57
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	88 2f       	mov	r24, r24
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	a9 01       	movw	r20, r18
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <MDIO_GetPinValue+0x7a>
    10a8:	55 95       	asr	r21
    10aa:	47 95       	ror	r20
    10ac:	8a 95       	dec	r24
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <MDIO_GetPinValue+0x76>
    10b0:	ca 01       	movw	r24, r20
    10b2:	81 70       	andi	r24, 0x01	; 1
    10b4:	89 83       	std	Y+1, r24	; 0x01
    10b6:	35 c0       	rjmp	.+106    	; 0x1122 <MDIO_GetPinValue+0xf0>
			break;
		case DIO_PORTB:
			local_PINValue = GET_BIT(PINB_REG,A_PINID);
    10b8:	e6 e3       	ldi	r30, 0x36	; 54
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	88 2f       	mov	r24, r24
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	a9 01       	movw	r20, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <MDIO_GetPinValue+0x9e>
    10cc:	55 95       	asr	r21
    10ce:	47 95       	ror	r20
    10d0:	8a 95       	dec	r24
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <MDIO_GetPinValue+0x9a>
    10d4:	ca 01       	movw	r24, r20
    10d6:	81 70       	andi	r24, 0x01	; 1
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	23 c0       	rjmp	.+70     	; 0x1122 <MDIO_GetPinValue+0xf0>
			break;
		case DIO_PORTC:
			local_PINValue = GET_BIT(PINC_REG,A_PINID);
    10dc:	e3 e3       	ldi	r30, 0x33	; 51
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	a9 01       	movw	r20, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <MDIO_GetPinValue+0xc2>
    10f0:	55 95       	asr	r21
    10f2:	47 95       	ror	r20
    10f4:	8a 95       	dec	r24
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <MDIO_GetPinValue+0xbe>
    10f8:	ca 01       	movw	r24, r20
    10fa:	81 70       	andi	r24, 0x01	; 1
    10fc:	89 83       	std	Y+1, r24	; 0x01
    10fe:	11 c0       	rjmp	.+34     	; 0x1122 <MDIO_GetPinValue+0xf0>
			break;
		case DIO_PORTD:
			local_PINValue = GET_BIT(PIND_REG,A_PINID);
    1100:	e0 e3       	ldi	r30, 0x30	; 48
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	88 2f       	mov	r24, r24
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	a9 01       	movw	r20, r18
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <MDIO_GetPinValue+0xe6>
    1114:	55 95       	asr	r21
    1116:	47 95       	ror	r20
    1118:	8a 95       	dec	r24
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <MDIO_GetPinValue+0xe2>
    111c:	ca 01       	movw	r24, r20
    111e:	81 70       	andi	r24, 0x01	; 1
    1120:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;
		}
	}
	return local_PINValue;
    1122:	89 81       	ldd	r24, Y+1	; 0x01
}
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <MDIO_voidTogglePinValue>:

void MDIO_voidTogglePinValue (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	00 d0       	rcall	.+0      	; 0x113a <MDIO_voidTogglePinValue+0x6>
    113a:	00 d0       	rcall	.+0      	; 0x113c <MDIO_voidTogglePinValue+0x8>
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_DIOPort <= DIO_PORTD) && (A_PINID <= PIN7))
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	84 30       	cpi	r24, 0x04	; 4
    1148:	08 f0       	brcs	.+2      	; 0x114c <MDIO_voidTogglePinValue+0x18>
    114a:	72 c0       	rjmp	.+228    	; 0x1230 <MDIO_voidTogglePinValue+0xfc>
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	88 30       	cpi	r24, 0x08	; 8
    1150:	08 f0       	brcs	.+2      	; 0x1154 <MDIO_voidTogglePinValue+0x20>
    1152:	6e c0       	rjmp	.+220    	; 0x1230 <MDIO_voidTogglePinValue+0xfc>
	{
		switch (A_DIOPort)
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	3c 83       	std	Y+4, r19	; 0x04
    115c:	2b 83       	std	Y+3, r18	; 0x03
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	9c 81       	ldd	r25, Y+4	; 0x04
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	91 05       	cpc	r25, r1
    1166:	49 f1       	breq	.+82     	; 0x11ba <MDIO_voidTogglePinValue+0x86>
    1168:	2b 81       	ldd	r18, Y+3	; 0x03
    116a:	3c 81       	ldd	r19, Y+4	; 0x04
    116c:	22 30       	cpi	r18, 0x02	; 2
    116e:	31 05       	cpc	r19, r1
    1170:	2c f4       	brge	.+10     	; 0x117c <MDIO_voidTogglePinValue+0x48>
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	9c 81       	ldd	r25, Y+4	; 0x04
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	61 f0       	breq	.+24     	; 0x1192 <MDIO_voidTogglePinValue+0x5e>
    117a:	5a c0       	rjmp	.+180    	; 0x1230 <MDIO_voidTogglePinValue+0xfc>
    117c:	2b 81       	ldd	r18, Y+3	; 0x03
    117e:	3c 81       	ldd	r19, Y+4	; 0x04
    1180:	22 30       	cpi	r18, 0x02	; 2
    1182:	31 05       	cpc	r19, r1
    1184:	71 f1       	breq	.+92     	; 0x11e2 <MDIO_voidTogglePinValue+0xae>
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	9c 81       	ldd	r25, Y+4	; 0x04
    118a:	83 30       	cpi	r24, 0x03	; 3
    118c:	91 05       	cpc	r25, r1
    118e:	e9 f1       	breq	.+122    	; 0x120a <MDIO_voidTogglePinValue+0xd6>
    1190:	4f c0       	rjmp	.+158    	; 0x1230 <MDIO_voidTogglePinValue+0xfc>
		{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA_REG,A_PINID);
    1192:	ab e3       	ldi	r26, 0x3B	; 59
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	eb e3       	ldi	r30, 0x3B	; 59
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <MDIO_voidTogglePinValue+0x7c>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <MDIO_voidTogglePinValue+0x78>
    11b4:	84 27       	eor	r24, r20
    11b6:	8c 93       	st	X, r24
    11b8:	3b c0       	rjmp	.+118    	; 0x1230 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB_REG,A_PINID);
    11ba:	a8 e3       	ldi	r26, 0x38	; 56
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e8 e3       	ldi	r30, 0x38	; 56
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 2e       	mov	r0, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <MDIO_voidTogglePinValue+0xa4>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	0a 94       	dec	r0
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <MDIO_voidTogglePinValue+0xa0>
    11dc:	84 27       	eor	r24, r20
    11de:	8c 93       	st	X, r24
    11e0:	27 c0       	rjmp	.+78     	; 0x1230 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC_REG,A_PINID);
    11e2:	a5 e3       	ldi	r26, 0x35	; 53
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e5 e3       	ldi	r30, 0x35	; 53
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	48 2f       	mov	r20, r24
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 2e       	mov	r0, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <MDIO_voidTogglePinValue+0xcc>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <MDIO_voidTogglePinValue+0xc8>
    1204:	84 27       	eor	r24, r20
    1206:	8c 93       	st	X, r24
    1208:	13 c0       	rjmp	.+38     	; 0x1230 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD_REG,A_PINID);
    120a:	a2 e3       	ldi	r26, 0x32	; 50
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e2 e3       	ldi	r30, 0x32	; 50
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <MDIO_voidTogglePinValue+0xf4>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <MDIO_voidTogglePinValue+0xf0>
    122c:	84 27       	eor	r24, r20
    122e:	8c 93       	st	X, r24
			break;
		default:
			break;
		}
	}
}
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <MDIO_voidSetPortDirection>:

void MDIO_voidSetPortDirection (DIO_PORT_e A_DIOPort, u8 A_u8Direction)
{
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <MDIO_voidSetPortDirection+0x6>
    1244:	00 d0       	rcall	.+0      	; 0x1246 <MDIO_voidSetPortDirection+0x8>
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	89 83       	std	Y+1, r24	; 0x01
    124c:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_DIOPort <= DIO_PORTD))
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	84 30       	cpi	r24, 0x04	; 4
    1252:	90 f5       	brcc	.+100    	; 0x12b8 <MDIO_voidSetPortDirection+0x7a>
	{
		switch (A_DIOPort)
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	3c 83       	std	Y+4, r19	; 0x04
    125c:	2b 83       	std	Y+3, r18	; 0x03
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	91 05       	cpc	r25, r1
    1266:	d1 f0       	breq	.+52     	; 0x129c <MDIO_voidSetPortDirection+0x5e>
    1268:	2b 81       	ldd	r18, Y+3	; 0x03
    126a:	3c 81       	ldd	r19, Y+4	; 0x04
    126c:	22 30       	cpi	r18, 0x02	; 2
    126e:	31 05       	cpc	r19, r1
    1270:	2c f4       	brge	.+10     	; 0x127c <MDIO_voidSetPortDirection+0x3e>
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9c 81       	ldd	r25, Y+4	; 0x04
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	61 f0       	breq	.+24     	; 0x1292 <MDIO_voidSetPortDirection+0x54>
    127a:	1e c0       	rjmp	.+60     	; 0x12b8 <MDIO_voidSetPortDirection+0x7a>
    127c:	2b 81       	ldd	r18, Y+3	; 0x03
    127e:	3c 81       	ldd	r19, Y+4	; 0x04
    1280:	22 30       	cpi	r18, 0x02	; 2
    1282:	31 05       	cpc	r19, r1
    1284:	81 f0       	breq	.+32     	; 0x12a6 <MDIO_voidSetPortDirection+0x68>
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	9c 81       	ldd	r25, Y+4	; 0x04
    128a:	83 30       	cpi	r24, 0x03	; 3
    128c:	91 05       	cpc	r25, r1
    128e:	81 f0       	breq	.+32     	; 0x12b0 <MDIO_voidSetPortDirection+0x72>
    1290:	13 c0       	rjmp	.+38     	; 0x12b8 <MDIO_voidSetPortDirection+0x7a>
		{
		case DIO_PORTA:
			DDRA_REG = A_u8Direction;
    1292:	ea e3       	ldi	r30, 0x3A	; 58
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	80 83       	st	Z, r24
    129a:	0e c0       	rjmp	.+28     	; 0x12b8 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTB:
			DDRB_REG = A_u8Direction;
    129c:	e7 e3       	ldi	r30, 0x37	; 55
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	80 83       	st	Z, r24
    12a4:	09 c0       	rjmp	.+18     	; 0x12b8 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTC:
			DDRC_REG = A_u8Direction;
    12a6:	e4 e3       	ldi	r30, 0x34	; 52
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	80 83       	st	Z, r24
    12ae:	04 c0       	rjmp	.+8      	; 0x12b8 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTD:
			DDRD_REG = A_u8Direction;
    12b0:	e1 e3       	ldi	r30, 0x31	; 49
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	80 83       	st	Z, r24
			break;
		default:
			break;
		}
	}
}
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue (DIO_PORT_e A_DIOPort, u8 A_u8Value)
{
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <MDIO_voidSetPortValue+0x6>
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <MDIO_voidSetPortValue+0x8>
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_DIOPort <= DIO_PORTD))
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	84 30       	cpi	r24, 0x04	; 4
    12da:	90 f5       	brcc	.+100    	; 0x1340 <MDIO_voidSetPortValue+0x7a>
	{
		switch (A_DIOPort)
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	3c 83       	std	Y+4, r19	; 0x04
    12e4:	2b 83       	std	Y+3, r18	; 0x03
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	91 05       	cpc	r25, r1
    12ee:	d1 f0       	breq	.+52     	; 0x1324 <MDIO_voidSetPortValue+0x5e>
    12f0:	2b 81       	ldd	r18, Y+3	; 0x03
    12f2:	3c 81       	ldd	r19, Y+4	; 0x04
    12f4:	22 30       	cpi	r18, 0x02	; 2
    12f6:	31 05       	cpc	r19, r1
    12f8:	2c f4       	brge	.+10     	; 0x1304 <MDIO_voidSetPortValue+0x3e>
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	61 f0       	breq	.+24     	; 0x131a <MDIO_voidSetPortValue+0x54>
    1302:	1e c0       	rjmp	.+60     	; 0x1340 <MDIO_voidSetPortValue+0x7a>
    1304:	2b 81       	ldd	r18, Y+3	; 0x03
    1306:	3c 81       	ldd	r19, Y+4	; 0x04
    1308:	22 30       	cpi	r18, 0x02	; 2
    130a:	31 05       	cpc	r19, r1
    130c:	81 f0       	breq	.+32     	; 0x132e <MDIO_voidSetPortValue+0x68>
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	9c 81       	ldd	r25, Y+4	; 0x04
    1312:	83 30       	cpi	r24, 0x03	; 3
    1314:	91 05       	cpc	r25, r1
    1316:	81 f0       	breq	.+32     	; 0x1338 <MDIO_voidSetPortValue+0x72>
    1318:	13 c0       	rjmp	.+38     	; 0x1340 <MDIO_voidSetPortValue+0x7a>
		{
		case DIO_PORTA:
			PORTA_REG = A_u8Value;
    131a:	eb e3       	ldi	r30, 0x3B	; 59
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	80 83       	st	Z, r24
    1322:	0e c0       	rjmp	.+28     	; 0x1340 <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTB:
			PORTB_REG = A_u8Value;
    1324:	e8 e3       	ldi	r30, 0x38	; 56
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	80 83       	st	Z, r24
    132c:	09 c0       	rjmp	.+18     	; 0x1340 <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTC:
			PORTC_REG = A_u8Value;
    132e:	e5 e3       	ldi	r30, 0x35	; 53
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	80 83       	st	Z, r24
    1336:	04 c0       	rjmp	.+8      	; 0x1340 <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTD:
			PORTD_REG = A_u8Value;
    1338:	e2 e3       	ldi	r30, 0x32	; 50
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	80 83       	st	Z, r24
			break;
		default:
			break;
		}
	}
}
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	cf 91       	pop	r28
    134a:	df 91       	pop	r29
    134c:	08 95       	ret

0000134e <MDIO_voidInit>:


void MDIO_voidInit()
{
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62

	DDRA_REG=CONC_BIT(PA7_INITIAL_DIRECTION,PA6_INITIAL_DIRECTION,PA5_INITIAL_DIRECTION,PA4_INITIAL_DIRECTION
    1356:	ea e3       	ldi	r30, 0x3A	; 58
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	80 83       	st	Z, r24
					 ,PA3_INITIAL_DIRECTION,PA2_INITIAL_DIRECTION,PA1_INITIAL_DIRECTION,PA0_INITIAL_DIRECTION);

	DDRB_REG=CONC_BIT(PB7_INITIAL_DIRECTION,PB6_INITIAL_DIRECTION,PB5_INITIAL_DIRECTION,PB4_INITIAL_DIRECTION
    135e:	e7 e3       	ldi	r30, 0x37	; 55
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	10 82       	st	Z, r1
					 ,PB3_INITIAL_DIRECTION,PB2_INITIAL_DIRECTION,PB1_INITIAL_DIRECTION,PB0_INITIAL_DIRECTION);

	DDRC_REG=CONC_BIT(PC7_INITIAL_DIRECTION,PC6_INITIAL_DIRECTION,PC5_INITIAL_DIRECTION,PC4_INITIAL_DIRECTION
    1364:	e4 e3       	ldi	r30, 0x34	; 52
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	10 82       	st	Z, r1
					 ,PC3_INITIAL_DIRECTION,PC2_INITIAL_DIRECTION,PC1_INITIAL_DIRECTION,PC0_INITIAL_DIRECTION);

	DDRD_REG=CONC_BIT(PD7_INITIAL_DIRECTION,PD6_INITIAL_DIRECTION,PD5_INITIAL_DIRECTION,PD4_INITIAL_DIRECTION
    136a:	e1 e3       	ldi	r30, 0x31	; 49
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	82 e0       	ldi	r24, 0x02	; 2
    1370:	80 83       	st	Z, r24
					 ,PD3_INITIAL_DIRECTION,PD2_INITIAL_DIRECTION,PD1_INITIAL_DIRECTION,PD0_INITIAL_DIRECTION);


	PORTA_REG=CONC_BIT(PA7_INITIAL_VALUE,PA6_INITIAL_VALUE,PA5_INITIAL_VALUE,PA4_INITIAL_VALUE
    1372:	eb e3       	ldi	r30, 0x3B	; 59
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	10 82       	st	Z, r1
					 ,PA3_INITIAL_VALUE,PA2_INITIAL_VALUE,PA1_INITIAL_VALUE,PA0_INITIAL_VALUE);

	PORTB_REG=CONC_BIT(PB7_INITIAL_VALUE,PB6_INITIAL_VALUE,PB5_INITIAL_VALUE,PB4_INITIAL_VALUE
    1378:	e8 e3       	ldi	r30, 0x38	; 56
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	10 82       	st	Z, r1
					 ,PB3_INITIAL_VALUE,PB2_INITIAL_VALUE,PB1_INITIAL_VALUE,PB0_INITIAL_VALUE);

	PORTC_REG=CONC_BIT(PC7_INITIAL_VALUE,PC6_INITIAL_VALUE,PC5_INITIAL_VALUE,PC4_INITIAL_VALUE
    137e:	e5 e3       	ldi	r30, 0x35	; 53
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	10 82       	st	Z, r1
					 ,PC3_INITIAL_VALUE,PC2_INITIAL_VALUE,PC1_INITIAL_VALUE,PC0_INITIAL_VALUE);

	PORTD_REG=CONC_BIT(PD7_INITIAL_VALUE,PD6_INITIAL_VALUE,PD5_INITIAL_VALUE,PD4_INITIAL_VALUE
    1384:	e2 e3       	ldi	r30, 0x32	; 50
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	10 82       	st	Z, r1
					 ,PD3_INITIAL_VALUE,PD2_INITIAL_VALUE,PD1_INITIAL_VALUE,PD0_INITIAL_VALUE);
}
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <MGI_voidEnable>:
#include "../Include/MCAL/GI/GI_private.h"
#include "../Include/MCAL/GI/GI_configuration.h"


void MGI_voidEnable (void)
{
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    1398:	af e5       	ldi	r26, 0x5F	; 95
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	ef e5       	ldi	r30, 0x5F	; 95
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	80 68       	ori	r24, 0x80	; 128
    13a4:	8c 93       	st	X, r24
}
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <MGI_voidDisable>:
void MGI_voidDisable (void)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    13b4:	af e5       	ldi	r26, 0x5F	; 95
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	ef e5       	ldi	r30, 0x5F	; 95
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	8f 77       	andi	r24, 0x7F	; 127
    13c0:	8c 93       	st	X, r24
}
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <HLCD_voidSendCommand>:
#include "../Include/HAL/LCD/LCD_Cfg.h"

#define F_CPU 8000000UL

void HLCD_voidSendCommand (u8 A_u8Command)
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	2f 97       	sbiw	r28, 0x0f	; 15
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	8f 87       	std	Y+15, r24	; 0x0f
	// To send Command --> (RS-->0) , (RW-->0)
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, DIO_RESET);
    13de:	83 e0       	ldi	r24, 0x03	; 3
    13e0:	63 e0       	ldi	r22, 0x03	; 3
    13e2:	40 e0       	ldi	r20, 0x00	; 0
    13e4:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, DIO_RESET);
    13e8:	83 e0       	ldi	r24, 0x03	; 3
    13ea:	64 e0       	ldi	r22, 0x04	; 4
    13ec:	40 e0       	ldi	r20, 0x00	; 0
    13ee:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_voidSetPinValue>

	// Send Command
	MDIO_voidSetPortValue(LCD_DATA_PORT, A_u8Command);
    13f2:	82 e0       	ldi	r24, 0x02	; 2
    13f4:	6f 85       	ldd	r22, Y+15	; 0x0f
    13f6:	0e 94 63 09 	call	0x12c6	; 0x12c6 <MDIO_voidSetPortValue>

	// Set Pulse on E Pin
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_E_PIN, DIO_SET);
    13fa:	83 e0       	ldi	r24, 0x03	; 3
    13fc:	65 e0       	ldi	r22, 0x05	; 5
    13fe:	41 e0       	ldi	r20, 0x01	; 1
    1400:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_voidSetPinValue>
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	a0 e0       	ldi	r26, 0x00	; 0
    140a:	b0 e4       	ldi	r27, 0x40	; 64
    140c:	8b 87       	std	Y+11, r24	; 0x0b
    140e:	9c 87       	std	Y+12, r25	; 0x0c
    1410:	ad 87       	std	Y+13, r26	; 0x0d
    1412:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1414:	6b 85       	ldd	r22, Y+11	; 0x0b
    1416:	7c 85       	ldd	r23, Y+12	; 0x0c
    1418:	8d 85       	ldd	r24, Y+13	; 0x0d
    141a:	9e 85       	ldd	r25, Y+14	; 0x0e
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	4a ef       	ldi	r20, 0xFA	; 250
    1422:	54 e4       	ldi	r21, 0x44	; 68
    1424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	8f 83       	std	Y+7, r24	; 0x07
    142e:	98 87       	std	Y+8, r25	; 0x08
    1430:	a9 87       	std	Y+9, r26	; 0x09
    1432:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1434:	6f 81       	ldd	r22, Y+7	; 0x07
    1436:	78 85       	ldd	r23, Y+8	; 0x08
    1438:	89 85       	ldd	r24, Y+9	; 0x09
    143a:	9a 85       	ldd	r25, Y+10	; 0x0a
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	40 e8       	ldi	r20, 0x80	; 128
    1442:	5f e3       	ldi	r21, 0x3F	; 63
    1444:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1448:	88 23       	and	r24, r24
    144a:	2c f4       	brge	.+10     	; 0x1456 <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	9e 83       	std	Y+6, r25	; 0x06
    1452:	8d 83       	std	Y+5, r24	; 0x05
    1454:	3f c0       	rjmp	.+126    	; 0x14d4 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1456:	6f 81       	ldd	r22, Y+7	; 0x07
    1458:	78 85       	ldd	r23, Y+8	; 0x08
    145a:	89 85       	ldd	r24, Y+9	; 0x09
    145c:	9a 85       	ldd	r25, Y+10	; 0x0a
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	3f ef       	ldi	r19, 0xFF	; 255
    1462:	4f e7       	ldi	r20, 0x7F	; 127
    1464:	57 e4       	ldi	r21, 0x47	; 71
    1466:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    146a:	18 16       	cp	r1, r24
    146c:	4c f5       	brge	.+82     	; 0x14c0 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    146e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1470:	7c 85       	ldd	r23, Y+12	; 0x0c
    1472:	8d 85       	ldd	r24, Y+13	; 0x0d
    1474:	9e 85       	ldd	r25, Y+14	; 0x0e
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	40 e2       	ldi	r20, 0x20	; 32
    147c:	51 e4       	ldi	r21, 0x41	; 65
    147e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	bc 01       	movw	r22, r24
    1488:	cd 01       	movw	r24, r26
    148a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	9e 83       	std	Y+6, r25	; 0x06
    1494:	8d 83       	std	Y+5, r24	; 0x05
    1496:	0f c0       	rjmp	.+30     	; 0x14b6 <HLCD_voidSendCommand+0xee>
    1498:	88 ec       	ldi	r24, 0xC8	; 200
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	9c 83       	std	Y+4, r25	; 0x04
    149e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	f1 f7       	brne	.-4      	; 0x14a4 <HLCD_voidSendCommand+0xdc>
    14a8:	9c 83       	std	Y+4, r25	; 0x04
    14aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ac:	8d 81       	ldd	r24, Y+5	; 0x05
    14ae:	9e 81       	ldd	r25, Y+6	; 0x06
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	9e 83       	std	Y+6, r25	; 0x06
    14b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b6:	8d 81       	ldd	r24, Y+5	; 0x05
    14b8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	69 f7       	brne	.-38     	; 0x1498 <HLCD_voidSendCommand+0xd0>
    14be:	14 c0       	rjmp	.+40     	; 0x14e8 <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c0:	6f 81       	ldd	r22, Y+7	; 0x07
    14c2:	78 85       	ldd	r23, Y+8	; 0x08
    14c4:	89 85       	ldd	r24, Y+9	; 0x09
    14c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	9e 83       	std	Y+6, r25	; 0x06
    14d2:	8d 83       	std	Y+5, r24	; 0x05
    14d4:	8d 81       	ldd	r24, Y+5	; 0x05
    14d6:	9e 81       	ldd	r25, Y+6	; 0x06
    14d8:	9a 83       	std	Y+2, r25	; 0x02
    14da:	89 83       	std	Y+1, r24	; 0x01
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	9a 81       	ldd	r25, Y+2	; 0x02
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	f1 f7       	brne	.-4      	; 0x14e0 <HLCD_voidSendCommand+0x118>
    14e4:	9a 83       	std	Y+2, r25	; 0x02
    14e6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_E_PIN, DIO_RESET);
    14e8:	83 e0       	ldi	r24, 0x03	; 3
    14ea:	65 e0       	ldi	r22, 0x05	; 5
    14ec:	40 e0       	ldi	r20, 0x00	; 0
    14ee:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_voidSetPinValue>
}
    14f2:	2f 96       	adiw	r28, 0x0f	; 15
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <HLCD_voidSendData>:

void HLCD_voidSendData (u8 A_u8Data)
{
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	2f 97       	sbiw	r28, 0x0f	; 15
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	f8 94       	cli
    1512:	de bf       	out	0x3e, r29	; 62
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	cd bf       	out	0x3d, r28	; 61
    1518:	8f 87       	std	Y+15, r24	; 0x0f
	// To send Data --> (RS-->1) , (RW-->0)
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, DIO_SET);
    151a:	83 e0       	ldi	r24, 0x03	; 3
    151c:	63 e0       	ldi	r22, 0x03	; 3
    151e:	41 e0       	ldi	r20, 0x01	; 1
    1520:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, DIO_RESET);
    1524:	83 e0       	ldi	r24, 0x03	; 3
    1526:	64 e0       	ldi	r22, 0x04	; 4
    1528:	40 e0       	ldi	r20, 0x00	; 0
    152a:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_voidSetPinValue>

	// Send Data
	MDIO_voidSetPortValue(LCD_DATA_PORT, A_u8Data);
    152e:	82 e0       	ldi	r24, 0x02	; 2
    1530:	6f 85       	ldd	r22, Y+15	; 0x0f
    1532:	0e 94 63 09 	call	0x12c6	; 0x12c6 <MDIO_voidSetPortValue>

	// Set Pulse on E Pin
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_E_PIN, DIO_SET);
    1536:	83 e0       	ldi	r24, 0x03	; 3
    1538:	65 e0       	ldi	r22, 0x05	; 5
    153a:	41 e0       	ldi	r20, 0x01	; 1
    153c:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_voidSetPinValue>
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	a0 e0       	ldi	r26, 0x00	; 0
    1546:	b0 e4       	ldi	r27, 0x40	; 64
    1548:	8b 87       	std	Y+11, r24	; 0x0b
    154a:	9c 87       	std	Y+12, r25	; 0x0c
    154c:	ad 87       	std	Y+13, r26	; 0x0d
    154e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1550:	6b 85       	ldd	r22, Y+11	; 0x0b
    1552:	7c 85       	ldd	r23, Y+12	; 0x0c
    1554:	8d 85       	ldd	r24, Y+13	; 0x0d
    1556:	9e 85       	ldd	r25, Y+14	; 0x0e
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	4a ef       	ldi	r20, 0xFA	; 250
    155e:	54 e4       	ldi	r21, 0x44	; 68
    1560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	8f 83       	std	Y+7, r24	; 0x07
    156a:	98 87       	std	Y+8, r25	; 0x08
    156c:	a9 87       	std	Y+9, r26	; 0x09
    156e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1570:	6f 81       	ldd	r22, Y+7	; 0x07
    1572:	78 85       	ldd	r23, Y+8	; 0x08
    1574:	89 85       	ldd	r24, Y+9	; 0x09
    1576:	9a 85       	ldd	r25, Y+10	; 0x0a
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e8       	ldi	r20, 0x80	; 128
    157e:	5f e3       	ldi	r21, 0x3F	; 63
    1580:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1584:	88 23       	and	r24, r24
    1586:	2c f4       	brge	.+10     	; 0x1592 <HLCD_voidSendData+0x8e>
		__ticks = 1;
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	9e 83       	std	Y+6, r25	; 0x06
    158e:	8d 83       	std	Y+5, r24	; 0x05
    1590:	3f c0       	rjmp	.+126    	; 0x1610 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1592:	6f 81       	ldd	r22, Y+7	; 0x07
    1594:	78 85       	ldd	r23, Y+8	; 0x08
    1596:	89 85       	ldd	r24, Y+9	; 0x09
    1598:	9a 85       	ldd	r25, Y+10	; 0x0a
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	3f ef       	ldi	r19, 0xFF	; 255
    159e:	4f e7       	ldi	r20, 0x7F	; 127
    15a0:	57 e4       	ldi	r21, 0x47	; 71
    15a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15a6:	18 16       	cp	r1, r24
    15a8:	4c f5       	brge	.+82     	; 0x15fc <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e2       	ldi	r20, 0x20	; 32
    15b8:	51 e4       	ldi	r21, 0x41	; 65
    15ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	bc 01       	movw	r22, r24
    15c4:	cd 01       	movw	r24, r26
    15c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	9e 83       	std	Y+6, r25	; 0x06
    15d0:	8d 83       	std	Y+5, r24	; 0x05
    15d2:	0f c0       	rjmp	.+30     	; 0x15f2 <HLCD_voidSendData+0xee>
    15d4:	88 ec       	ldi	r24, 0xC8	; 200
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	9c 83       	std	Y+4, r25	; 0x04
    15da:	8b 83       	std	Y+3, r24	; 0x03
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	9c 81       	ldd	r25, Y+4	; 0x04
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	f1 f7       	brne	.-4      	; 0x15e0 <HLCD_voidSendData+0xdc>
    15e4:	9c 83       	std	Y+4, r25	; 0x04
    15e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ea:	9e 81       	ldd	r25, Y+6	; 0x06
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	9e 83       	std	Y+6, r25	; 0x06
    15f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f2:	8d 81       	ldd	r24, Y+5	; 0x05
    15f4:	9e 81       	ldd	r25, Y+6	; 0x06
    15f6:	00 97       	sbiw	r24, 0x00	; 0
    15f8:	69 f7       	brne	.-38     	; 0x15d4 <HLCD_voidSendData+0xd0>
    15fa:	14 c0       	rjmp	.+40     	; 0x1624 <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15fc:	6f 81       	ldd	r22, Y+7	; 0x07
    15fe:	78 85       	ldd	r23, Y+8	; 0x08
    1600:	89 85       	ldd	r24, Y+9	; 0x09
    1602:	9a 85       	ldd	r25, Y+10	; 0x0a
    1604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	9e 83       	std	Y+6, r25	; 0x06
    160e:	8d 83       	std	Y+5, r24	; 0x05
    1610:	8d 81       	ldd	r24, Y+5	; 0x05
    1612:	9e 81       	ldd	r25, Y+6	; 0x06
    1614:	9a 83       	std	Y+2, r25	; 0x02
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	9a 81       	ldd	r25, Y+2	; 0x02
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	f1 f7       	brne	.-4      	; 0x161c <HLCD_voidSendData+0x118>
    1620:	9a 83       	std	Y+2, r25	; 0x02
    1622:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_E_PIN, DIO_RESET);
    1624:	83 e0       	ldi	r24, 0x03	; 3
    1626:	65 e0       	ldi	r22, 0x05	; 5
    1628:	40 e0       	ldi	r20, 0x00	; 0
    162a:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_voidSetPinValue>
}
    162e:	2f 96       	adiw	r28, 0x0f	; 15
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	08 95       	ret

00001640 <HLCD_voidInit>:


void HLCD_voidInit(void)
{
    1640:	0f 93       	push	r16
    1642:	1f 93       	push	r17
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	c6 54       	subi	r28, 0x46	; 70
    164e:	d0 40       	sbci	r29, 0x00	; 0
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	fe 01       	movw	r30, r28
    165c:	ed 5b       	subi	r30, 0xBD	; 189
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	a0 ef       	ldi	r26, 0xF0	; 240
    1666:	b1 e4       	ldi	r27, 0x41	; 65
    1668:	80 83       	st	Z, r24
    166a:	91 83       	std	Z+1, r25	; 0x01
    166c:	a2 83       	std	Z+2, r26	; 0x02
    166e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1670:	8e 01       	movw	r16, r28
    1672:	01 5c       	subi	r16, 0xC1	; 193
    1674:	1f 4f       	sbci	r17, 0xFF	; 255
    1676:	fe 01       	movw	r30, r28
    1678:	ed 5b       	subi	r30, 0xBD	; 189
    167a:	ff 4f       	sbci	r31, 0xFF	; 255
    167c:	60 81       	ld	r22, Z
    167e:	71 81       	ldd	r23, Z+1	; 0x01
    1680:	82 81       	ldd	r24, Z+2	; 0x02
    1682:	93 81       	ldd	r25, Z+3	; 0x03
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	4a ef       	ldi	r20, 0xFA	; 250
    168a:	54 e4       	ldi	r21, 0x44	; 68
    168c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	f8 01       	movw	r30, r16
    1696:	80 83       	st	Z, r24
    1698:	91 83       	std	Z+1, r25	; 0x01
    169a:	a2 83       	std	Z+2, r26	; 0x02
    169c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    169e:	fe 01       	movw	r30, r28
    16a0:	ff 96       	adiw	r30, 0x3f	; 63
    16a2:	60 81       	ld	r22, Z
    16a4:	71 81       	ldd	r23, Z+1	; 0x01
    16a6:	82 81       	ldd	r24, Z+2	; 0x02
    16a8:	93 81       	ldd	r25, Z+3	; 0x03
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	40 e8       	ldi	r20, 0x80	; 128
    16b0:	5f e3       	ldi	r21, 0x3F	; 63
    16b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16b6:	88 23       	and	r24, r24
    16b8:	2c f4       	brge	.+10     	; 0x16c4 <HLCD_voidInit+0x84>
		__ticks = 1;
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	9e af       	std	Y+62, r25	; 0x3e
    16c0:	8d af       	std	Y+61, r24	; 0x3d
    16c2:	46 c0       	rjmp	.+140    	; 0x1750 <HLCD_voidInit+0x110>
	else if (__tmp > 65535)
    16c4:	fe 01       	movw	r30, r28
    16c6:	ff 96       	adiw	r30, 0x3f	; 63
    16c8:	60 81       	ld	r22, Z
    16ca:	71 81       	ldd	r23, Z+1	; 0x01
    16cc:	82 81       	ldd	r24, Z+2	; 0x02
    16ce:	93 81       	ldd	r25, Z+3	; 0x03
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	3f ef       	ldi	r19, 0xFF	; 255
    16d4:	4f e7       	ldi	r20, 0x7F	; 127
    16d6:	57 e4       	ldi	r21, 0x47	; 71
    16d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16dc:	18 16       	cp	r1, r24
    16de:	64 f5       	brge	.+88     	; 0x1738 <HLCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e0:	fe 01       	movw	r30, r28
    16e2:	ed 5b       	subi	r30, 0xBD	; 189
    16e4:	ff 4f       	sbci	r31, 0xFF	; 255
    16e6:	60 81       	ld	r22, Z
    16e8:	71 81       	ldd	r23, Z+1	; 0x01
    16ea:	82 81       	ldd	r24, Z+2	; 0x02
    16ec:	93 81       	ldd	r25, Z+3	; 0x03
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	40 e2       	ldi	r20, 0x20	; 32
    16f4:	51 e4       	ldi	r21, 0x41	; 65
    16f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	bc 01       	movw	r22, r24
    1700:	cd 01       	movw	r24, r26
    1702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	9e af       	std	Y+62, r25	; 0x3e
    170c:	8d af       	std	Y+61, r24	; 0x3d
    170e:	0f c0       	rjmp	.+30     	; 0x172e <HLCD_voidInit+0xee>
    1710:	88 ec       	ldi	r24, 0xC8	; 200
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	9c af       	std	Y+60, r25	; 0x3c
    1716:	8b af       	std	Y+59, r24	; 0x3b
    1718:	8b ad       	ldd	r24, Y+59	; 0x3b
    171a:	9c ad       	ldd	r25, Y+60	; 0x3c
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	f1 f7       	brne	.-4      	; 0x171c <HLCD_voidInit+0xdc>
    1720:	9c af       	std	Y+60, r25	; 0x3c
    1722:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1724:	8d ad       	ldd	r24, Y+61	; 0x3d
    1726:	9e ad       	ldd	r25, Y+62	; 0x3e
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	9e af       	std	Y+62, r25	; 0x3e
    172c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1730:	9e ad       	ldd	r25, Y+62	; 0x3e
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	69 f7       	brne	.-38     	; 0x1710 <HLCD_voidInit+0xd0>
    1736:	16 c0       	rjmp	.+44     	; 0x1764 <HLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1738:	fe 01       	movw	r30, r28
    173a:	ff 96       	adiw	r30, 0x3f	; 63
    173c:	60 81       	ld	r22, Z
    173e:	71 81       	ldd	r23, Z+1	; 0x01
    1740:	82 81       	ldd	r24, Z+2	; 0x02
    1742:	93 81       	ldd	r25, Z+3	; 0x03
    1744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	9e af       	std	Y+62, r25	; 0x3e
    174e:	8d af       	std	Y+61, r24	; 0x3d
    1750:	8d ad       	ldd	r24, Y+61	; 0x3d
    1752:	9e ad       	ldd	r25, Y+62	; 0x3e
    1754:	9a af       	std	Y+58, r25	; 0x3a
    1756:	89 af       	std	Y+57, r24	; 0x39
    1758:	89 ad       	ldd	r24, Y+57	; 0x39
    175a:	9a ad       	ldd	r25, Y+58	; 0x3a
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	f1 f7       	brne	.-4      	; 0x175c <HLCD_voidInit+0x11c>
    1760:	9a af       	std	Y+58, r25	; 0x3a
    1762:	89 af       	std	Y+57, r24	; 0x39
	// Wait for more than 30ms after VDD rises to 4.5v
	_delay_ms(30);

	// Function Set Command then wait for more than 39us
	HLCD_voidSendCommand(FUNCTION_SET);
    1764:	88 e3       	ldi	r24, 0x38	; 56
    1766:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <HLCD_voidSendCommand>
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	a0 e8       	ldi	r26, 0x80	; 128
    1770:	bf e3       	ldi	r27, 0x3F	; 63
    1772:	8d ab       	std	Y+53, r24	; 0x35
    1774:	9e ab       	std	Y+54, r25	; 0x36
    1776:	af ab       	std	Y+55, r26	; 0x37
    1778:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    177a:	6d a9       	ldd	r22, Y+53	; 0x35
    177c:	7e a9       	ldd	r23, Y+54	; 0x36
    177e:	8f a9       	ldd	r24, Y+55	; 0x37
    1780:	98 ad       	ldd	r25, Y+56	; 0x38
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	4a ef       	ldi	r20, 0xFA	; 250
    1788:	54 e4       	ldi	r21, 0x44	; 68
    178a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	89 ab       	std	Y+49, r24	; 0x31
    1794:	9a ab       	std	Y+50, r25	; 0x32
    1796:	ab ab       	std	Y+51, r26	; 0x33
    1798:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    179a:	69 a9       	ldd	r22, Y+49	; 0x31
    179c:	7a a9       	ldd	r23, Y+50	; 0x32
    179e:	8b a9       	ldd	r24, Y+51	; 0x33
    17a0:	9c a9       	ldd	r25, Y+52	; 0x34
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	40 e8       	ldi	r20, 0x80	; 128
    17a8:	5f e3       	ldi	r21, 0x3F	; 63
    17aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ae:	88 23       	and	r24, r24
    17b0:	2c f4       	brge	.+10     	; 0x17bc <HLCD_voidInit+0x17c>
		__ticks = 1;
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	98 ab       	std	Y+48, r25	; 0x30
    17b8:	8f a7       	std	Y+47, r24	; 0x2f
    17ba:	3f c0       	rjmp	.+126    	; 0x183a <HLCD_voidInit+0x1fa>
	else if (__tmp > 65535)
    17bc:	69 a9       	ldd	r22, Y+49	; 0x31
    17be:	7a a9       	ldd	r23, Y+50	; 0x32
    17c0:	8b a9       	ldd	r24, Y+51	; 0x33
    17c2:	9c a9       	ldd	r25, Y+52	; 0x34
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	3f ef       	ldi	r19, 0xFF	; 255
    17c8:	4f e7       	ldi	r20, 0x7F	; 127
    17ca:	57 e4       	ldi	r21, 0x47	; 71
    17cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17d0:	18 16       	cp	r1, r24
    17d2:	4c f5       	brge	.+82     	; 0x1826 <HLCD_voidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d4:	6d a9       	ldd	r22, Y+53	; 0x35
    17d6:	7e a9       	ldd	r23, Y+54	; 0x36
    17d8:	8f a9       	ldd	r24, Y+55	; 0x37
    17da:	98 ad       	ldd	r25, Y+56	; 0x38
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	40 e2       	ldi	r20, 0x20	; 32
    17e2:	51 e4       	ldi	r21, 0x41	; 65
    17e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	bc 01       	movw	r22, r24
    17ee:	cd 01       	movw	r24, r26
    17f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	98 ab       	std	Y+48, r25	; 0x30
    17fa:	8f a7       	std	Y+47, r24	; 0x2f
    17fc:	0f c0       	rjmp	.+30     	; 0x181c <HLCD_voidInit+0x1dc>
    17fe:	88 ec       	ldi	r24, 0xC8	; 200
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	9e a7       	std	Y+46, r25	; 0x2e
    1804:	8d a7       	std	Y+45, r24	; 0x2d
    1806:	8d a5       	ldd	r24, Y+45	; 0x2d
    1808:	9e a5       	ldd	r25, Y+46	; 0x2e
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	f1 f7       	brne	.-4      	; 0x180a <HLCD_voidInit+0x1ca>
    180e:	9e a7       	std	Y+46, r25	; 0x2e
    1810:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1812:	8f a5       	ldd	r24, Y+47	; 0x2f
    1814:	98 a9       	ldd	r25, Y+48	; 0x30
    1816:	01 97       	sbiw	r24, 0x01	; 1
    1818:	98 ab       	std	Y+48, r25	; 0x30
    181a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181c:	8f a5       	ldd	r24, Y+47	; 0x2f
    181e:	98 a9       	ldd	r25, Y+48	; 0x30
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	69 f7       	brne	.-38     	; 0x17fe <HLCD_voidInit+0x1be>
    1824:	14 c0       	rjmp	.+40     	; 0x184e <HLCD_voidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1826:	69 a9       	ldd	r22, Y+49	; 0x31
    1828:	7a a9       	ldd	r23, Y+50	; 0x32
    182a:	8b a9       	ldd	r24, Y+51	; 0x33
    182c:	9c a9       	ldd	r25, Y+52	; 0x34
    182e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	98 ab       	std	Y+48, r25	; 0x30
    1838:	8f a7       	std	Y+47, r24	; 0x2f
    183a:	8f a5       	ldd	r24, Y+47	; 0x2f
    183c:	98 a9       	ldd	r25, Y+48	; 0x30
    183e:	9c a7       	std	Y+44, r25	; 0x2c
    1840:	8b a7       	std	Y+43, r24	; 0x2b
    1842:	8b a5       	ldd	r24, Y+43	; 0x2b
    1844:	9c a5       	ldd	r25, Y+44	; 0x2c
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	f1 f7       	brne	.-4      	; 0x1846 <HLCD_voidInit+0x206>
    184a:	9c a7       	std	Y+44, r25	; 0x2c
    184c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	// Display ON/OFF Control Command then wait for more than 39us
	HLCD_voidSendCommand(DISPLAY_ON_OFF_CONTROL);
    184e:	8f e0       	ldi	r24, 0x0F	; 15
    1850:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <HLCD_voidSendCommand>
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	a0 e8       	ldi	r26, 0x80	; 128
    185a:	bf e3       	ldi	r27, 0x3F	; 63
    185c:	8f a3       	std	Y+39, r24	; 0x27
    185e:	98 a7       	std	Y+40, r25	; 0x28
    1860:	a9 a7       	std	Y+41, r26	; 0x29
    1862:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1864:	6f a1       	ldd	r22, Y+39	; 0x27
    1866:	78 a5       	ldd	r23, Y+40	; 0x28
    1868:	89 a5       	ldd	r24, Y+41	; 0x29
    186a:	9a a5       	ldd	r25, Y+42	; 0x2a
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	4a ef       	ldi	r20, 0xFA	; 250
    1872:	54 e4       	ldi	r21, 0x44	; 68
    1874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	8b a3       	std	Y+35, r24	; 0x23
    187e:	9c a3       	std	Y+36, r25	; 0x24
    1880:	ad a3       	std	Y+37, r26	; 0x25
    1882:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1884:	6b a1       	ldd	r22, Y+35	; 0x23
    1886:	7c a1       	ldd	r23, Y+36	; 0x24
    1888:	8d a1       	ldd	r24, Y+37	; 0x25
    188a:	9e a1       	ldd	r25, Y+38	; 0x26
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	40 e8       	ldi	r20, 0x80	; 128
    1892:	5f e3       	ldi	r21, 0x3F	; 63
    1894:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1898:	88 23       	and	r24, r24
    189a:	2c f4       	brge	.+10     	; 0x18a6 <HLCD_voidInit+0x266>
		__ticks = 1;
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	9a a3       	std	Y+34, r25	; 0x22
    18a2:	89 a3       	std	Y+33, r24	; 0x21
    18a4:	3f c0       	rjmp	.+126    	; 0x1924 <HLCD_voidInit+0x2e4>
	else if (__tmp > 65535)
    18a6:	6b a1       	ldd	r22, Y+35	; 0x23
    18a8:	7c a1       	ldd	r23, Y+36	; 0x24
    18aa:	8d a1       	ldd	r24, Y+37	; 0x25
    18ac:	9e a1       	ldd	r25, Y+38	; 0x26
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	3f ef       	ldi	r19, 0xFF	; 255
    18b2:	4f e7       	ldi	r20, 0x7F	; 127
    18b4:	57 e4       	ldi	r21, 0x47	; 71
    18b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ba:	18 16       	cp	r1, r24
    18bc:	4c f5       	brge	.+82     	; 0x1910 <HLCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18be:	6f a1       	ldd	r22, Y+39	; 0x27
    18c0:	78 a5       	ldd	r23, Y+40	; 0x28
    18c2:	89 a5       	ldd	r24, Y+41	; 0x29
    18c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	40 e2       	ldi	r20, 0x20	; 32
    18cc:	51 e4       	ldi	r21, 0x41	; 65
    18ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	bc 01       	movw	r22, r24
    18d8:	cd 01       	movw	r24, r26
    18da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	9a a3       	std	Y+34, r25	; 0x22
    18e4:	89 a3       	std	Y+33, r24	; 0x21
    18e6:	0f c0       	rjmp	.+30     	; 0x1906 <HLCD_voidInit+0x2c6>
    18e8:	88 ec       	ldi	r24, 0xC8	; 200
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	98 a3       	std	Y+32, r25	; 0x20
    18ee:	8f 8f       	std	Y+31, r24	; 0x1f
    18f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18f2:	98 a1       	ldd	r25, Y+32	; 0x20
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	f1 f7       	brne	.-4      	; 0x18f4 <HLCD_voidInit+0x2b4>
    18f8:	98 a3       	std	Y+32, r25	; 0x20
    18fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fc:	89 a1       	ldd	r24, Y+33	; 0x21
    18fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	9a a3       	std	Y+34, r25	; 0x22
    1904:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1906:	89 a1       	ldd	r24, Y+33	; 0x21
    1908:	9a a1       	ldd	r25, Y+34	; 0x22
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	69 f7       	brne	.-38     	; 0x18e8 <HLCD_voidInit+0x2a8>
    190e:	14 c0       	rjmp	.+40     	; 0x1938 <HLCD_voidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1910:	6b a1       	ldd	r22, Y+35	; 0x23
    1912:	7c a1       	ldd	r23, Y+36	; 0x24
    1914:	8d a1       	ldd	r24, Y+37	; 0x25
    1916:	9e a1       	ldd	r25, Y+38	; 0x26
    1918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	9a a3       	std	Y+34, r25	; 0x22
    1922:	89 a3       	std	Y+33, r24	; 0x21
    1924:	89 a1       	ldd	r24, Y+33	; 0x21
    1926:	9a a1       	ldd	r25, Y+34	; 0x22
    1928:	9e 8f       	std	Y+30, r25	; 0x1e
    192a:	8d 8f       	std	Y+29, r24	; 0x1d
    192c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    192e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1930:	01 97       	sbiw	r24, 0x01	; 1
    1932:	f1 f7       	brne	.-4      	; 0x1930 <HLCD_voidInit+0x2f0>
    1934:	9e 8f       	std	Y+30, r25	; 0x1e
    1936:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	// Display Clear Command then wait for more than 1.53ms
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <HLCD_voidSendCommand>
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	a0 e0       	ldi	r26, 0x00	; 0
    1944:	b0 e4       	ldi	r27, 0x40	; 64
    1946:	89 8f       	std	Y+25, r24	; 0x19
    1948:	9a 8f       	std	Y+26, r25	; 0x1a
    194a:	ab 8f       	std	Y+27, r26	; 0x1b
    194c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194e:	69 8d       	ldd	r22, Y+25	; 0x19
    1950:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1952:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1954:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	4a ef       	ldi	r20, 0xFA	; 250
    195c:	54 e4       	ldi	r21, 0x44	; 68
    195e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	8d 8b       	std	Y+21, r24	; 0x15
    1968:	9e 8b       	std	Y+22, r25	; 0x16
    196a:	af 8b       	std	Y+23, r26	; 0x17
    196c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    196e:	6d 89       	ldd	r22, Y+21	; 0x15
    1970:	7e 89       	ldd	r23, Y+22	; 0x16
    1972:	8f 89       	ldd	r24, Y+23	; 0x17
    1974:	98 8d       	ldd	r25, Y+24	; 0x18
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e8       	ldi	r20, 0x80	; 128
    197c:	5f e3       	ldi	r21, 0x3F	; 63
    197e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1982:	88 23       	and	r24, r24
    1984:	2c f4       	brge	.+10     	; 0x1990 <HLCD_voidInit+0x350>
		__ticks = 1;
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	9c 8b       	std	Y+20, r25	; 0x14
    198c:	8b 8b       	std	Y+19, r24	; 0x13
    198e:	3f c0       	rjmp	.+126    	; 0x1a0e <HLCD_voidInit+0x3ce>
	else if (__tmp > 65535)
    1990:	6d 89       	ldd	r22, Y+21	; 0x15
    1992:	7e 89       	ldd	r23, Y+22	; 0x16
    1994:	8f 89       	ldd	r24, Y+23	; 0x17
    1996:	98 8d       	ldd	r25, Y+24	; 0x18
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	3f ef       	ldi	r19, 0xFF	; 255
    199c:	4f e7       	ldi	r20, 0x7F	; 127
    199e:	57 e4       	ldi	r21, 0x47	; 71
    19a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19a4:	18 16       	cp	r1, r24
    19a6:	4c f5       	brge	.+82     	; 0x19fa <HLCD_voidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a8:	69 8d       	ldd	r22, Y+25	; 0x19
    19aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e2       	ldi	r20, 0x20	; 32
    19b6:	51 e4       	ldi	r21, 0x41	; 65
    19b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	bc 01       	movw	r22, r24
    19c2:	cd 01       	movw	r24, r26
    19c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	9c 8b       	std	Y+20, r25	; 0x14
    19ce:	8b 8b       	std	Y+19, r24	; 0x13
    19d0:	0f c0       	rjmp	.+30     	; 0x19f0 <HLCD_voidInit+0x3b0>
    19d2:	88 ec       	ldi	r24, 0xC8	; 200
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	9a 8b       	std	Y+18, r25	; 0x12
    19d8:	89 8b       	std	Y+17, r24	; 0x11
    19da:	89 89       	ldd	r24, Y+17	; 0x11
    19dc:	9a 89       	ldd	r25, Y+18	; 0x12
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	f1 f7       	brne	.-4      	; 0x19de <HLCD_voidInit+0x39e>
    19e2:	9a 8b       	std	Y+18, r25	; 0x12
    19e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e6:	8b 89       	ldd	r24, Y+19	; 0x13
    19e8:	9c 89       	ldd	r25, Y+20	; 0x14
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	9c 8b       	std	Y+20, r25	; 0x14
    19ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f0:	8b 89       	ldd	r24, Y+19	; 0x13
    19f2:	9c 89       	ldd	r25, Y+20	; 0x14
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	69 f7       	brne	.-38     	; 0x19d2 <HLCD_voidInit+0x392>
    19f8:	14 c0       	rjmp	.+40     	; 0x1a22 <HLCD_voidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fa:	6d 89       	ldd	r22, Y+21	; 0x15
    19fc:	7e 89       	ldd	r23, Y+22	; 0x16
    19fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1a00:	98 8d       	ldd	r25, Y+24	; 0x18
    1a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	9c 8b       	std	Y+20, r25	; 0x14
    1a0c:	8b 8b       	std	Y+19, r24	; 0x13
    1a0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a10:	9c 89       	ldd	r25, Y+20	; 0x14
    1a12:	98 8b       	std	Y+16, r25	; 0x10
    1a14:	8f 87       	std	Y+15, r24	; 0x0f
    1a16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a18:	98 89       	ldd	r25, Y+16	; 0x10
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	f1 f7       	brne	.-4      	; 0x1a1a <HLCD_voidInit+0x3da>
    1a1e:	98 8b       	std	Y+16, r25	; 0x10
    1a20:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	// Entry Mode Set Command then wait for more than 39us
	HLCD_voidSendCommand(ENTRY_MODE_SET);
    1a22:	86 e0       	ldi	r24, 0x06	; 6
    1a24:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <HLCD_voidSendCommand>
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	a0 e8       	ldi	r26, 0x80	; 128
    1a2e:	bf e3       	ldi	r27, 0x3F	; 63
    1a30:	8b 87       	std	Y+11, r24	; 0x0b
    1a32:	9c 87       	std	Y+12, r25	; 0x0c
    1a34:	ad 87       	std	Y+13, r26	; 0x0d
    1a36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	4a ef       	ldi	r20, 0xFA	; 250
    1a46:	54 e4       	ldi	r21, 0x44	; 68
    1a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	8f 83       	std	Y+7, r24	; 0x07
    1a52:	98 87       	std	Y+8, r25	; 0x08
    1a54:	a9 87       	std	Y+9, r26	; 0x09
    1a56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a58:	6f 81       	ldd	r22, Y+7	; 0x07
    1a5a:	78 85       	ldd	r23, Y+8	; 0x08
    1a5c:	89 85       	ldd	r24, Y+9	; 0x09
    1a5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e8       	ldi	r20, 0x80	; 128
    1a66:	5f e3       	ldi	r21, 0x3F	; 63
    1a68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a6c:	88 23       	and	r24, r24
    1a6e:	2c f4       	brge	.+10     	; 0x1a7a <HLCD_voidInit+0x43a>
		__ticks = 1;
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	9e 83       	std	Y+6, r25	; 0x06
    1a76:	8d 83       	std	Y+5, r24	; 0x05
    1a78:	3f c0       	rjmp	.+126    	; 0x1af8 <HLCD_voidInit+0x4b8>
	else if (__tmp > 65535)
    1a7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7c:	78 85       	ldd	r23, Y+8	; 0x08
    1a7e:	89 85       	ldd	r24, Y+9	; 0x09
    1a80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	3f ef       	ldi	r19, 0xFF	; 255
    1a86:	4f e7       	ldi	r20, 0x7F	; 127
    1a88:	57 e4       	ldi	r21, 0x47	; 71
    1a8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a8e:	18 16       	cp	r1, r24
    1a90:	4c f5       	brge	.+82     	; 0x1ae4 <HLCD_voidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e2       	ldi	r20, 0x20	; 32
    1aa0:	51 e4       	ldi	r21, 0x41	; 65
    1aa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	bc 01       	movw	r22, r24
    1aac:	cd 01       	movw	r24, r26
    1aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	9e 83       	std	Y+6, r25	; 0x06
    1ab8:	8d 83       	std	Y+5, r24	; 0x05
    1aba:	0f c0       	rjmp	.+30     	; 0x1ada <HLCD_voidInit+0x49a>
    1abc:	88 ec       	ldi	r24, 0xC8	; 200
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	9c 83       	std	Y+4, r25	; 0x04
    1ac2:	8b 83       	std	Y+3, r24	; 0x03
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <HLCD_voidInit+0x488>
    1acc:	9c 83       	std	Y+4, r25	; 0x04
    1ace:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	9e 83       	std	Y+6, r25	; 0x06
    1ad8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ada:	8d 81       	ldd	r24, Y+5	; 0x05
    1adc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	69 f7       	brne	.-38     	; 0x1abc <HLCD_voidInit+0x47c>
    1ae2:	14 c0       	rjmp	.+40     	; 0x1b0c <HLCD_voidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae6:	78 85       	ldd	r23, Y+8	; 0x08
    1ae8:	89 85       	ldd	r24, Y+9	; 0x09
    1aea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	9e 83       	std	Y+6, r25	; 0x06
    1af6:	8d 83       	std	Y+5, r24	; 0x05
    1af8:	8d 81       	ldd	r24, Y+5	; 0x05
    1afa:	9e 81       	ldd	r25, Y+6	; 0x06
    1afc:	9a 83       	std	Y+2, r25	; 0x02
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	9a 81       	ldd	r25, Y+2	; 0x02
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	f1 f7       	brne	.-4      	; 0x1b04 <HLCD_voidInit+0x4c4>
    1b08:	9a 83       	std	Y+2, r25	; 0x02
    1b0a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    1b0c:	ca 5b       	subi	r28, 0xBA	; 186
    1b0e:	df 4f       	sbci	r29, 0xFF	; 255
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	1f 91       	pop	r17
    1b20:	0f 91       	pop	r16
    1b22:	08 95       	ret

00001b24 <HLCD_voidClearDisplay>:

void HLCD_voidClearDisplay(void)
{
    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	2e 97       	sbiw	r28, 0x0e	; 14
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	de bf       	out	0x3e, r29	; 62
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	cd bf       	out	0x3d, r28	; 61
	// Display Clear Command then wait for more than 1.53ms
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <HLCD_voidSendCommand>
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	a0 e0       	ldi	r26, 0x00	; 0
    1b44:	b0 e4       	ldi	r27, 0x40	; 64
    1b46:	8b 87       	std	Y+11, r24	; 0x0b
    1b48:	9c 87       	std	Y+12, r25	; 0x0c
    1b4a:	ad 87       	std	Y+13, r26	; 0x0d
    1b4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	4a ef       	ldi	r20, 0xFA	; 250
    1b5c:	54 e4       	ldi	r21, 0x44	; 68
    1b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	8f 83       	std	Y+7, r24	; 0x07
    1b68:	98 87       	std	Y+8, r25	; 0x08
    1b6a:	a9 87       	std	Y+9, r26	; 0x09
    1b6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b70:	78 85       	ldd	r23, Y+8	; 0x08
    1b72:	89 85       	ldd	r24, Y+9	; 0x09
    1b74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e8       	ldi	r20, 0x80	; 128
    1b7c:	5f e3       	ldi	r21, 0x3F	; 63
    1b7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b82:	88 23       	and	r24, r24
    1b84:	2c f4       	brge	.+10     	; 0x1b90 <HLCD_voidClearDisplay+0x6c>
		__ticks = 1;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	9e 83       	std	Y+6, r25	; 0x06
    1b8c:	8d 83       	std	Y+5, r24	; 0x05
    1b8e:	3f c0       	rjmp	.+126    	; 0x1c0e <HLCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    1b90:	6f 81       	ldd	r22, Y+7	; 0x07
    1b92:	78 85       	ldd	r23, Y+8	; 0x08
    1b94:	89 85       	ldd	r24, Y+9	; 0x09
    1b96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	3f ef       	ldi	r19, 0xFF	; 255
    1b9c:	4f e7       	ldi	r20, 0x7F	; 127
    1b9e:	57 e4       	ldi	r21, 0x47	; 71
    1ba0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ba4:	18 16       	cp	r1, r24
    1ba6:	4c f5       	brge	.+82     	; 0x1bfa <HLCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1baa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e2       	ldi	r20, 0x20	; 32
    1bb6:	51 e4       	ldi	r21, 0x41	; 65
    1bb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	bc 01       	movw	r22, r24
    1bc2:	cd 01       	movw	r24, r26
    1bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	9e 83       	std	Y+6, r25	; 0x06
    1bce:	8d 83       	std	Y+5, r24	; 0x05
    1bd0:	0f c0       	rjmp	.+30     	; 0x1bf0 <HLCD_voidClearDisplay+0xcc>
    1bd2:	88 ec       	ldi	r24, 0xC8	; 200
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	9c 83       	std	Y+4, r25	; 0x04
    1bd8:	8b 83       	std	Y+3, r24	; 0x03
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <HLCD_voidClearDisplay+0xba>
    1be2:	9c 83       	std	Y+4, r25	; 0x04
    1be4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be6:	8d 81       	ldd	r24, Y+5	; 0x05
    1be8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	9e 83       	std	Y+6, r25	; 0x06
    1bee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf4:	00 97       	sbiw	r24, 0x00	; 0
    1bf6:	69 f7       	brne	.-38     	; 0x1bd2 <HLCD_voidClearDisplay+0xae>
    1bf8:	14 c0       	rjmp	.+40     	; 0x1c22 <HLCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfa:	6f 81       	ldd	r22, Y+7	; 0x07
    1bfc:	78 85       	ldd	r23, Y+8	; 0x08
    1bfe:	89 85       	ldd	r24, Y+9	; 0x09
    1c00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	9e 83       	std	Y+6, r25	; 0x06
    1c0c:	8d 83       	std	Y+5, r24	; 0x05
    1c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c10:	9e 81       	ldd	r25, Y+6	; 0x06
    1c12:	9a 83       	std	Y+2, r25	; 0x02
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <HLCD_voidClearDisplay+0xf6>
    1c1e:	9a 83       	std	Y+2, r25	; 0x02
    1c20:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1c22:	2e 96       	adiw	r28, 0x0e	; 14
    1c24:	0f b6       	in	r0, 0x3f	; 63
    1c26:	f8 94       	cli
    1c28:	de bf       	out	0x3e, r29	; 62
    1c2a:	0f be       	out	0x3f, r0	; 63
    1c2c:	cd bf       	out	0x3d, r28	; 61
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	08 95       	ret

00001c34 <HLCD_voidDisplayString>:

void HLCD_voidDisplayString(u8 *A_8uPtrToString)
{
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <HLCD_voidDisplayString+0x6>
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	9a 83       	std	Y+2, r25	; 0x02
    1c40:	89 83       	std	Y+1, r24	; 0x01
    1c42:	0b c0       	rjmp	.+22     	; 0x1c5a <HLCD_voidDisplayString+0x26>
	while (*A_8uPtrToString > 0)
	{
		HLCD_voidSendData(*A_8uPtrToString++);
    1c44:	e9 81       	ldd	r30, Y+1	; 0x01
    1c46:	fa 81       	ldd	r31, Y+2	; 0x02
    1c48:	20 81       	ld	r18, Z
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4e:	01 96       	adiw	r24, 0x01	; 1
    1c50:	9a 83       	std	Y+2, r25	; 0x02
    1c52:	89 83       	std	Y+1, r24	; 0x01
    1c54:	82 2f       	mov	r24, r18
    1c56:	0e 94 82 0a 	call	0x1504	; 0x1504 <HLCD_voidSendData>
	_delay_ms(2);
}

void HLCD_voidDisplayString(u8 *A_8uPtrToString)
{
	while (*A_8uPtrToString > 0)
    1c5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c5e:	80 81       	ld	r24, Z
    1c60:	88 23       	and	r24, r24
    1c62:	81 f7       	brne	.-32     	; 0x1c44 <HLCD_voidDisplayString+0x10>
	{
		HLCD_voidSendData(*A_8uPtrToString++);
	}
}
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <HLCD_voidGoToPos>:


void HLCD_voidGoToPos (LCD_ROW_e A_LCDRow, LCD_COL_e A_LCDCol)
{
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	00 d0       	rcall	.+0      	; 0x1c74 <HLCD_voidGoToPos+0x6>
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <HLCD_voidGoToPos+0x8>
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_LCDRow)
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	28 2f       	mov	r18, r24
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	3c 83       	std	Y+4, r19	; 0x04
    1c86:	2b 83       	std	Y+3, r18	; 0x03
    1c88:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8c:	81 30       	cpi	r24, 0x01	; 1
    1c8e:	91 05       	cpc	r25, r1
    1c90:	31 f0       	breq	.+12     	; 0x1c9e <HLCD_voidGoToPos+0x30>
    1c92:	2b 81       	ldd	r18, Y+3	; 0x03
    1c94:	3c 81       	ldd	r19, Y+4	; 0x04
    1c96:	22 30       	cpi	r18, 0x02	; 2
    1c98:	31 05       	cpc	r19, r1
    1c9a:	31 f0       	breq	.+12     	; 0x1ca8 <HLCD_voidGoToPos+0x3a>
    1c9c:	09 c0       	rjmp	.+18     	; 0x1cb0 <HLCD_voidGoToPos+0x42>
	{
	case LCD_ROW1:
		HLCD_voidSendCommand(ROW1_BASE_ADD + A_LCDCol);
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	81 58       	subi	r24, 0x81	; 129
    1ca2:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <HLCD_voidSendCommand>
    1ca6:	04 c0       	rjmp	.+8      	; 0x1cb0 <HLCD_voidGoToPos+0x42>
		break;
	case LCD_ROW2:
		HLCD_voidSendCommand(ROW2_BASE_ADD + A_LCDCol);
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	81 54       	subi	r24, 0x41	; 65
    1cac:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <HLCD_voidSendCommand>
		break;
	default:
		break;
	}
}
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <HLCD_voidDisplayNumber>:

void HLCD_voidDisplayNumber (u32 A_u32Number)
{
    1cbe:	ef 92       	push	r14
    1cc0:	ff 92       	push	r15
    1cc2:	0f 93       	push	r16
    1cc4:	1f 93       	push	r17
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
    1cce:	28 97       	sbiw	r28, 0x08	; 8
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
    1cda:	6d 83       	std	Y+5, r22	; 0x05
    1cdc:	7e 83       	std	Y+6, r23	; 0x06
    1cde:	8f 83       	std	Y+7, r24	; 0x07
    1ce0:	98 87       	std	Y+8, r25	; 0x08
	u32 local_u32Num = 1;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	a0 e0       	ldi	r26, 0x00	; 0
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	89 83       	std	Y+1, r24	; 0x01
    1cec:	9a 83       	std	Y+2, r25	; 0x02
    1cee:	ab 83       	std	Y+3, r26	; 0x03
    1cf0:	bc 83       	std	Y+4, r27	; 0x04
	if (A_u32Number == 0)
    1cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf6:	af 81       	ldd	r26, Y+7	; 0x07
    1cf8:	b8 85       	ldd	r27, Y+8	; 0x08
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	a1 05       	cpc	r26, r1
    1cfe:	b1 05       	cpc	r27, r1
    1d00:	d1 f5       	brne	.+116    	; 0x1d76 <HLCD_voidDisplayNumber+0xb8>
	{
		HLCD_voidSendData('0');
    1d02:	80 e3       	ldi	r24, 0x30	; 48
    1d04:	0e 94 82 0a 	call	0x1504	; 0x1504 <HLCD_voidSendData>
    1d08:	36 c0       	rjmp	.+108    	; 0x1d76 <HLCD_voidDisplayNumber+0xb8>
	}

	while (A_u32Number != 0)
	{
		local_u32Num = (local_u32Num * 10) + (A_u32Number % 10);
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0e:	ab 81       	ldd	r26, Y+3	; 0x03
    1d10:	bc 81       	ldd	r27, Y+4	; 0x04
    1d12:	2a e0       	ldi	r18, 0x0A	; 10
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e0       	ldi	r20, 0x00	; 0
    1d18:	50 e0       	ldi	r21, 0x00	; 0
    1d1a:	bc 01       	movw	r22, r24
    1d1c:	cd 01       	movw	r24, r26
    1d1e:	0e 94 84 11 	call	0x2308	; 0x2308 <__mulsi3>
    1d22:	7b 01       	movw	r14, r22
    1d24:	8c 01       	movw	r16, r24
    1d26:	8d 81       	ldd	r24, Y+5	; 0x05
    1d28:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2a:	af 81       	ldd	r26, Y+7	; 0x07
    1d2c:	b8 85       	ldd	r27, Y+8	; 0x08
    1d2e:	2a e0       	ldi	r18, 0x0A	; 10
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	40 e0       	ldi	r20, 0x00	; 0
    1d34:	50 e0       	ldi	r21, 0x00	; 0
    1d36:	bc 01       	movw	r22, r24
    1d38:	cd 01       	movw	r24, r26
    1d3a:	0e 94 a3 11 	call	0x2346	; 0x2346 <__udivmodsi4>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	8e 0d       	add	r24, r14
    1d44:	9f 1d       	adc	r25, r15
    1d46:	a0 1f       	adc	r26, r16
    1d48:	b1 1f       	adc	r27, r17
    1d4a:	89 83       	std	Y+1, r24	; 0x01
    1d4c:	9a 83       	std	Y+2, r25	; 0x02
    1d4e:	ab 83       	std	Y+3, r26	; 0x03
    1d50:	bc 83       	std	Y+4, r27	; 0x04
		A_u32Number = A_u32Number / 10;
    1d52:	8d 81       	ldd	r24, Y+5	; 0x05
    1d54:	9e 81       	ldd	r25, Y+6	; 0x06
    1d56:	af 81       	ldd	r26, Y+7	; 0x07
    1d58:	b8 85       	ldd	r27, Y+8	; 0x08
    1d5a:	2a e0       	ldi	r18, 0x0A	; 10
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	40 e0       	ldi	r20, 0x00	; 0
    1d60:	50 e0       	ldi	r21, 0x00	; 0
    1d62:	bc 01       	movw	r22, r24
    1d64:	cd 01       	movw	r24, r26
    1d66:	0e 94 a3 11 	call	0x2346	; 0x2346 <__udivmodsi4>
    1d6a:	da 01       	movw	r26, r20
    1d6c:	c9 01       	movw	r24, r18
    1d6e:	8d 83       	std	Y+5, r24	; 0x05
    1d70:	9e 83       	std	Y+6, r25	; 0x06
    1d72:	af 83       	std	Y+7, r26	; 0x07
    1d74:	b8 87       	std	Y+8, r27	; 0x08
	if (A_u32Number == 0)
	{
		HLCD_voidSendData('0');
	}

	while (A_u32Number != 0)
    1d76:	8d 81       	ldd	r24, Y+5	; 0x05
    1d78:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7a:	af 81       	ldd	r26, Y+7	; 0x07
    1d7c:	b8 85       	ldd	r27, Y+8	; 0x08
    1d7e:	00 97       	sbiw	r24, 0x00	; 0
    1d80:	a1 05       	cpc	r26, r1
    1d82:	b1 05       	cpc	r27, r1
    1d84:	11 f6       	brne	.-124    	; 0x1d0a <HLCD_voidDisplayNumber+0x4c>
    1d86:	23 c0       	rjmp	.+70     	; 0x1dce <HLCD_voidDisplayNumber+0x110>
		local_u32Num = (local_u32Num * 10) + (A_u32Number % 10);
		A_u32Number = A_u32Number / 10;
	}
	while (local_u32Num != 1)
	{
		HLCD_voidSendData ((local_u32Num % 10) + 48);
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8c:	ab 81       	ldd	r26, Y+3	; 0x03
    1d8e:	bc 81       	ldd	r27, Y+4	; 0x04
    1d90:	2a e0       	ldi	r18, 0x0A	; 10
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	40 e0       	ldi	r20, 0x00	; 0
    1d96:	50 e0       	ldi	r21, 0x00	; 0
    1d98:	bc 01       	movw	r22, r24
    1d9a:	cd 01       	movw	r24, r26
    1d9c:	0e 94 a3 11 	call	0x2346	; 0x2346 <__udivmodsi4>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	80 5d       	subi	r24, 0xD0	; 208
    1da6:	0e 94 82 0a 	call	0x1504	; 0x1504 <HLCD_voidSendData>
		local_u32Num = local_u32Num / 10;
    1daa:	89 81       	ldd	r24, Y+1	; 0x01
    1dac:	9a 81       	ldd	r25, Y+2	; 0x02
    1dae:	ab 81       	ldd	r26, Y+3	; 0x03
    1db0:	bc 81       	ldd	r27, Y+4	; 0x04
    1db2:	2a e0       	ldi	r18, 0x0A	; 10
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e0       	ldi	r20, 0x00	; 0
    1db8:	50 e0       	ldi	r21, 0x00	; 0
    1dba:	bc 01       	movw	r22, r24
    1dbc:	cd 01       	movw	r24, r26
    1dbe:	0e 94 a3 11 	call	0x2346	; 0x2346 <__udivmodsi4>
    1dc2:	da 01       	movw	r26, r20
    1dc4:	c9 01       	movw	r24, r18
    1dc6:	89 83       	std	Y+1, r24	; 0x01
    1dc8:	9a 83       	std	Y+2, r25	; 0x02
    1dca:	ab 83       	std	Y+3, r26	; 0x03
    1dcc:	bc 83       	std	Y+4, r27	; 0x04
	while (A_u32Number != 0)
	{
		local_u32Num = (local_u32Num * 10) + (A_u32Number % 10);
		A_u32Number = A_u32Number / 10;
	}
	while (local_u32Num != 1)
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd2:	ab 81       	ldd	r26, Y+3	; 0x03
    1dd4:	bc 81       	ldd	r27, Y+4	; 0x04
    1dd6:	81 30       	cpi	r24, 0x01	; 1
    1dd8:	91 05       	cpc	r25, r1
    1dda:	a1 05       	cpc	r26, r1
    1ddc:	b1 05       	cpc	r27, r1
    1dde:	a1 f6       	brne	.-88     	; 0x1d88 <HLCD_voidDisplayNumber+0xca>
	{
		HLCD_voidSendData ((local_u32Num % 10) + 48);
		local_u32Num = local_u32Num / 10;
	}
}
    1de0:	28 96       	adiw	r28, 0x08	; 8
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	1f 91       	pop	r17
    1df2:	0f 91       	pop	r16
    1df4:	ff 90       	pop	r15
    1df6:	ef 90       	pop	r14
    1df8:	08 95       	ret

00001dfa <HLCD_voidSendSpecialSymbol>:


void HLCD_voidSendSpecialSymbol (u8 *A_pu8SymbolArray, LCD_PATTERNS_e A_PatternNum,LCD_ROW_e A_RowNo, LCD_COL_e A_ColNo)
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	27 97       	sbiw	r28, 0x07	; 7
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	cd bf       	out	0x3d, r28	; 61
    1e0e:	9c 83       	std	Y+4, r25	; 0x04
    1e10:	8b 83       	std	Y+3, r24	; 0x03
    1e12:	6d 83       	std	Y+5, r22	; 0x05
    1e14:	4e 83       	std	Y+6, r20	; 0x06
    1e16:	2f 83       	std	Y+7, r18	; 0x07
	u8 local_u8CGRAMAddress;

	// Calculate CGRAM Address
	local_u8CGRAMAddress = A_PatternNum * 8;
    1e18:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1a:	88 2f       	mov	r24, r24
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	88 0f       	add	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(local_u8CGRAMAddress,6);
    1e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2e:	80 64       	ori	r24, 0x40	; 64
    1e30:	8a 83       	std	Y+2, r24	; 0x02
	// Send Set CGRAM Address Command
	HLCD_voidSendCommand(local_u8CGRAMAddress);
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <HLCD_voidSendCommand>

	for (u8 local_u8Counter=0; local_u8Counter<8; local_u8Counter++)
    1e38:	19 82       	std	Y+1, r1	; 0x01
    1e3a:	0e c0       	rjmp	.+28     	; 0x1e58 <HLCD_voidSendSpecialSymbol+0x5e>
	{
		// Send Byte by Byte from the Symbol Array
		HLCD_voidSendData(A_pu8SymbolArray[local_u8Counter]);
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	8b 81       	ldd	r24, Y+3	; 0x03
    1e44:	9c 81       	ldd	r25, Y+4	; 0x04
    1e46:	fc 01       	movw	r30, r24
    1e48:	e2 0f       	add	r30, r18
    1e4a:	f3 1f       	adc	r31, r19
    1e4c:	80 81       	ld	r24, Z
    1e4e:	0e 94 82 0a 	call	0x1504	; 0x1504 <HLCD_voidSendData>
	local_u8CGRAMAddress = A_PatternNum * 8;
	SET_BIT(local_u8CGRAMAddress,6);
	// Send Set CGRAM Address Command
	HLCD_voidSendCommand(local_u8CGRAMAddress);

	for (u8 local_u8Counter=0; local_u8Counter<8; local_u8Counter++)
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	8f 5f       	subi	r24, 0xFF	; 255
    1e56:	89 83       	std	Y+1, r24	; 0x01
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	88 30       	cpi	r24, 0x08	; 8
    1e5c:	78 f3       	brcs	.-34     	; 0x1e3c <HLCD_voidSendSpecialSymbol+0x42>
		// Send Byte by Byte from the Symbol Array
		HLCD_voidSendData(A_pu8SymbolArray[local_u8Counter]);
	}

	// Send Command to Set DDRAM Address
	HLCD_voidGoToPos(A_RowNo, A_ColNo);
    1e5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e60:	6f 81       	ldd	r22, Y+7	; 0x07
    1e62:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <HLCD_voidGoToPos>
	// Display Pattern
	HLCD_voidSendData(A_PatternNum);
    1e66:	8d 81       	ldd	r24, Y+5	; 0x05
    1e68:	0e 94 82 0a 	call	0x1504	; 0x1504 <HLCD_voidSendData>
}
    1e6c:	27 96       	adiw	r28, 0x07	; 7
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <HLED_voidTurnOn>:
 * HAL
 */


void HLED_voidTurnOn  (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <HLED_voidTurnOn+0x6>
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	89 83       	std	Y+1, r24	; 0x01
    1e8a:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(A_DIOPort, A_PINID, DIO_SET);
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	6a 81       	ldd	r22, Y+2	; 0x02
    1e90:	41 e0       	ldi	r20, 0x01	; 1
    1e92:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_voidSetPinValue>
}
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <HLED_voidTurnOff>:
void HLED_voidTurnOff (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	00 d0       	rcall	.+0      	; 0x1ea6 <HLED_voidTurnOff+0x6>
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
    1eaa:	89 83       	std	Y+1, r24	; 0x01
    1eac:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(A_DIOPort, A_PINID, DIO_RESET);
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	6a 81       	ldd	r22, Y+2	; 0x02
    1eb2:	40 e0       	ldi	r20, 0x00	; 0
    1eb4:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_voidSetPinValue>
}
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <HLED_voidToggleLED>:
void HLED_voidToggleLED (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	00 d0       	rcall	.+0      	; 0x1ec8 <HLED_voidToggleLED+0x6>
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidTogglePinValue(A_DIOPort, A_PINID);
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	48 2f       	mov	r20, r24
    1ed4:	50 e0       	ldi	r21, 0x00	; 0
    1ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed8:	28 2f       	mov	r18, r24
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	ca 01       	movw	r24, r20
    1ede:	b9 01       	movw	r22, r18
    1ee0:	0e 94 9a 08 	call	0x1134	; 0x1134 <MDIO_voidTogglePinValue>
}
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <MUART_voidInit>:
#define NULL 0

static void (*FuncPtr[3]) (void) = {NULL,NULL,NULL};

void MUART_voidInit(void)
{
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	00 d0       	rcall	.+0      	; 0x1ef4 <MUART_voidInit+0x6>
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
	u16 local_u16BaudRate = BAUD_RATE_EQUATION;
    1ef8:	83 e3       	ldi	r24, 0x33	; 51
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	9a 83       	std	Y+2, r25	; 0x02
    1efe:	89 83       	std	Y+1, r24	; 0x01
	// Set Baudrate
	UBRRL = (u8) local_u16BaudRate;
    1f00:	e9 e2       	ldi	r30, 0x29	; 41
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	80 83       	st	Z, r24
	UBRRH = (u8) (local_u16BaudRate >> 8);
    1f08:	e0 e4       	ldi	r30, 0x40	; 64
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f10:	89 2f       	mov	r24, r25
    1f12:	99 27       	eor	r25, r25
    1f14:	80 83       	st	Z, r24

	// Character Size 8-bit
	CLR_BIT(UCSRB,2);
    1f16:	aa e2       	ldi	r26, 0x2A	; 42
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	ea e2       	ldi	r30, 0x2A	; 42
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	8b 7f       	andi	r24, 0xFB	; 251
    1f22:	8c 93       	st	X, r24

	// Character Size 8-bit
	// Mode Asynchronous operation
	// Parity Disabled
	// 1 Stop Bit
	UCSRC = CONC_BIT(1,0,0,0,0,1,1,0);
    1f24:	e0 e4       	ldi	r30, 0x40	; 64
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	86 e8       	ldi	r24, 0x86	; 134
    1f2a:	80 83       	st	Z, r24

	// Enable Receiver
	// Enable Transmitter
	SET_BIT(UCSRB,3);
    1f2c:	aa e2       	ldi	r26, 0x2A	; 42
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	ea e2       	ldi	r30, 0x2A	; 42
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	88 60       	ori	r24, 0x08	; 8
    1f38:	8c 93       	st	X, r24
	SET_BIT(UCSRB,4);
    1f3a:	aa e2       	ldi	r26, 0x2A	; 42
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	ea e2       	ldi	r30, 0x2A	; 42
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	80 61       	ori	r24, 0x10	; 16
    1f46:	8c 93       	st	X, r24
}
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	08 95       	ret

00001f52 <MUART_voidSendByteSyncBlocking>:


void MUART_voidSendByteSyncBlocking (u8 A_u8DataByte)
{
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	0f 92       	push	r0
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	89 83       	std	Y+1, r24	; 0x01
	// wait until UDR is empty
	while (GET_BIT(UCSRA,5)==0);
    1f5e:	eb e2       	ldi	r30, 0x2B	; 43
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	82 95       	swap	r24
    1f66:	86 95       	lsr	r24
    1f68:	87 70       	andi	r24, 0x07	; 7
    1f6a:	88 2f       	mov	r24, r24
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	81 70       	andi	r24, 0x01	; 1
    1f70:	90 70       	andi	r25, 0x00	; 0
    1f72:	00 97       	sbiw	r24, 0x00	; 0
    1f74:	a1 f3       	breq	.-24     	; 0x1f5e <MUART_voidSendByteSyncBlocking+0xc>

	// Set Data into Tx Register and start Transmission
	UDR = A_u8DataByte;
    1f76:	ec e2       	ldi	r30, 0x2C	; 44
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	80 83       	st	Z, r24

	// wait until UDR is empty
	while (GET_BIT(UCSRA,5)==0);
    1f7e:	eb e2       	ldi	r30, 0x2B	; 43
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	82 95       	swap	r24
    1f86:	86 95       	lsr	r24
    1f88:	87 70       	andi	r24, 0x07	; 7
    1f8a:	88 2f       	mov	r24, r24
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	81 70       	andi	r24, 0x01	; 1
    1f90:	90 70       	andi	r25, 0x00	; 0
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	a1 f3       	breq	.-24     	; 0x1f7e <MUART_voidSendByteSyncBlocking+0x2c>

	// Clear transmit Interrupt flag
	SET_BIT(UCSRA,6);
    1f96:	ab e2       	ldi	r26, 0x2B	; 43
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	eb e2       	ldi	r30, 0x2B	; 43
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	80 64       	ori	r24, 0x40	; 64
    1fa2:	8c 93       	st	X, r24

}
    1fa4:	0f 90       	pop	r0
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	08 95       	ret

00001fac <MUART_voidSendByteSyncNonBlocking>:

void MUART_voidSendByteSyncNonBlocking (u8 A_u8DataByte)
{
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	00 d0       	rcall	.+0      	; 0x1fb2 <MUART_voidSendByteSyncNonBlocking+0x6>
    1fb2:	00 d0       	rcall	.+0      	; 0x1fb4 <MUART_voidSendByteSyncNonBlocking+0x8>
    1fb4:	0f 92       	push	r0
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	8d 83       	std	Y+5, r24	; 0x05
	u32 local_u32Timeout=0;
    1fbc:	19 82       	std	Y+1, r1	; 0x01
    1fbe:	1a 82       	std	Y+2, r1	; 0x02
    1fc0:	1b 82       	std	Y+3, r1	; 0x03
    1fc2:	1c 82       	std	Y+4, r1	; 0x04
    1fc4:	17 c0       	rjmp	.+46     	; 0x1ff4 <MUART_voidSendByteSyncNonBlocking+0x48>

	// wait until UDR is empty
	while (GET_BIT(UCSRA,5)==0)
	{
		local_u32Timeout++;
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fca:	ab 81       	ldd	r26, Y+3	; 0x03
    1fcc:	bc 81       	ldd	r27, Y+4	; 0x04
    1fce:	01 96       	adiw	r24, 0x01	; 1
    1fd0:	a1 1d       	adc	r26, r1
    1fd2:	b1 1d       	adc	r27, r1
    1fd4:	89 83       	std	Y+1, r24	; 0x01
    1fd6:	9a 83       	std	Y+2, r25	; 0x02
    1fd8:	ab 83       	std	Y+3, r26	; 0x03
    1fda:	bc 83       	std	Y+4, r27	; 0x04
		if (local_u32Timeout == NON_BLOCKING_TIME_OUT)
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe0:	ab 81       	ldd	r26, Y+3	; 0x03
    1fe2:	bc 81       	ldd	r27, Y+4	; 0x04
    1fe4:	88 38       	cpi	r24, 0x88	; 136
    1fe6:	23 e1       	ldi	r18, 0x13	; 19
    1fe8:	92 07       	cpc	r25, r18
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	a2 07       	cpc	r26, r18
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	b2 07       	cpc	r27, r18
    1ff2:	61 f0       	breq	.+24     	; 0x200c <MUART_voidSendByteSyncNonBlocking+0x60>
void MUART_voidSendByteSyncNonBlocking (u8 A_u8DataByte)
{
	u32 local_u32Timeout=0;

	// wait until UDR is empty
	while (GET_BIT(UCSRA,5)==0)
    1ff4:	eb e2       	ldi	r30, 0x2B	; 43
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	82 95       	swap	r24
    1ffc:	86 95       	lsr	r24
    1ffe:	87 70       	andi	r24, 0x07	; 7
    2000:	88 2f       	mov	r24, r24
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	81 70       	andi	r24, 0x01	; 1
    2006:	90 70       	andi	r25, 0x00	; 0
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	e9 f2       	breq	.-70     	; 0x1fc6 <MUART_voidSendByteSyncNonBlocking+0x1a>
		{
			break;
		}
	}

	if (local_u32Timeout != NON_BLOCKING_TIME_OUT)
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	9a 81       	ldd	r25, Y+2	; 0x02
    2010:	ab 81       	ldd	r26, Y+3	; 0x03
    2012:	bc 81       	ldd	r27, Y+4	; 0x04
    2014:	88 38       	cpi	r24, 0x88	; 136
    2016:	23 e1       	ldi	r18, 0x13	; 19
    2018:	92 07       	cpc	r25, r18
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	a2 07       	cpc	r26, r18
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	b2 07       	cpc	r27, r18
    2022:	99 f1       	breq	.+102    	; 0x208a <MUART_voidSendByteSyncNonBlocking+0xde>
	{
		local_u32Timeout = 0;
    2024:	19 82       	std	Y+1, r1	; 0x01
    2026:	1a 82       	std	Y+2, r1	; 0x02
    2028:	1b 82       	std	Y+3, r1	; 0x03
    202a:	1c 82       	std	Y+4, r1	; 0x04
		// Set Data into Tx Register and start Transmission
		UDR = A_u8DataByte;
    202c:	ec e2       	ldi	r30, 0x2C	; 44
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	8d 81       	ldd	r24, Y+5	; 0x05
    2032:	80 83       	st	Z, r24
    2034:	17 c0       	rjmp	.+46     	; 0x2064 <MUART_voidSendByteSyncNonBlocking+0xb8>
		// wait until UDR is empty
		while (GET_BIT(UCSRA,5)==0)
		{
			local_u32Timeout++;
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	9a 81       	ldd	r25, Y+2	; 0x02
    203a:	ab 81       	ldd	r26, Y+3	; 0x03
    203c:	bc 81       	ldd	r27, Y+4	; 0x04
    203e:	01 96       	adiw	r24, 0x01	; 1
    2040:	a1 1d       	adc	r26, r1
    2042:	b1 1d       	adc	r27, r1
    2044:	89 83       	std	Y+1, r24	; 0x01
    2046:	9a 83       	std	Y+2, r25	; 0x02
    2048:	ab 83       	std	Y+3, r26	; 0x03
    204a:	bc 83       	std	Y+4, r27	; 0x04
			if (local_u32Timeout == NON_BLOCKING_TIME_OUT)
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	9a 81       	ldd	r25, Y+2	; 0x02
    2050:	ab 81       	ldd	r26, Y+3	; 0x03
    2052:	bc 81       	ldd	r27, Y+4	; 0x04
    2054:	88 38       	cpi	r24, 0x88	; 136
    2056:	23 e1       	ldi	r18, 0x13	; 19
    2058:	92 07       	cpc	r25, r18
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	a2 07       	cpc	r26, r18
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	b2 07       	cpc	r27, r18
    2062:	61 f0       	breq	.+24     	; 0x207c <MUART_voidSendByteSyncNonBlocking+0xd0>
	{
		local_u32Timeout = 0;
		// Set Data into Tx Register and start Transmission
		UDR = A_u8DataByte;
		// wait until UDR is empty
		while (GET_BIT(UCSRA,5)==0)
    2064:	eb e2       	ldi	r30, 0x2B	; 43
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	82 95       	swap	r24
    206c:	86 95       	lsr	r24
    206e:	87 70       	andi	r24, 0x07	; 7
    2070:	88 2f       	mov	r24, r24
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	81 70       	andi	r24, 0x01	; 1
    2076:	90 70       	andi	r25, 0x00	; 0
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	e9 f2       	breq	.-70     	; 0x2036 <MUART_voidSendByteSyncNonBlocking+0x8a>
			{
				break;
			}
		}
		// Clear transmit Interrupt flag
		SET_BIT(UCSRA,6);
    207c:	ab e2       	ldi	r26, 0x2B	; 43
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	eb e2       	ldi	r30, 0x2B	; 43
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	80 64       	ori	r24, 0x40	; 64
    2088:	8c 93       	st	X, r24
	}

}
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	0f 90       	pop	r0
    2094:	cf 91       	pop	r28
    2096:	df 91       	pop	r29
    2098:	08 95       	ret

0000209a <MUART_voidSendStringSyncNonBlocking>:


void MUART_voidSendStringSyncNonBlocking (u8 *A_pu8String)
{
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	00 d0       	rcall	.+0      	; 0x20a0 <MUART_voidSendStringSyncNonBlocking+0x6>
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62
    20a4:	9a 83       	std	Y+2, r25	; 0x02
    20a6:	89 83       	std	Y+1, r24	; 0x01
    20a8:	0b c0       	rjmp	.+22     	; 0x20c0 <MUART_voidSendStringSyncNonBlocking+0x26>
	while(*A_pu8String > 0)
	{
		MUART_voidSendByteSyncNonBlocking(*A_pu8String++);
    20aa:	e9 81       	ldd	r30, Y+1	; 0x01
    20ac:	fa 81       	ldd	r31, Y+2	; 0x02
    20ae:	20 81       	ld	r18, Z
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	9a 81       	ldd	r25, Y+2	; 0x02
    20b4:	01 96       	adiw	r24, 0x01	; 1
    20b6:	9a 83       	std	Y+2, r25	; 0x02
    20b8:	89 83       	std	Y+1, r24	; 0x01
    20ba:	82 2f       	mov	r24, r18
    20bc:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <MUART_voidSendByteSyncNonBlocking>
}


void MUART_voidSendStringSyncNonBlocking (u8 *A_pu8String)
{
	while(*A_pu8String > 0)
    20c0:	e9 81       	ldd	r30, Y+1	; 0x01
    20c2:	fa 81       	ldd	r31, Y+2	; 0x02
    20c4:	80 81       	ld	r24, Z
    20c6:	88 23       	and	r24, r24
    20c8:	81 f7       	brne	.-32     	; 0x20aa <MUART_voidSendStringSyncNonBlocking+0x10>
	{
		MUART_voidSendByteSyncNonBlocking(*A_pu8String++);
	}
}
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	08 95       	ret

000020d4 <MUART_voidSendByteAsync>:


void MUART_voidSendByteAsync (u8 A_u8DataByte)
{
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	0f 92       	push	r0
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	89 83       	std	Y+1, r24	; 0x01
	// Check if Data Register is empty
	if (GET_BIT(UCSRA,5)==1)
    20e0:	eb e2       	ldi	r30, 0x2B	; 43
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	82 95       	swap	r24
    20e8:	86 95       	lsr	r24
    20ea:	87 70       	andi	r24, 0x07	; 7
    20ec:	88 2f       	mov	r24, r24
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	81 70       	andi	r24, 0x01	; 1
    20f2:	90 70       	andi	r25, 0x00	; 0
    20f4:	88 23       	and	r24, r24
    20f6:	21 f0       	breq	.+8      	; 0x2100 <MUART_voidSendByteAsync+0x2c>
	{
		// Send Data
		UDR = A_u8DataByte;
    20f8:	ec e2       	ldi	r30, 0x2C	; 44
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	80 83       	st	Z, r24
	}
}
    2100:	0f 90       	pop	r0
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	08 95       	ret

00002108 <MUART_u8ReadByteSyncBlocking>:


u8 MUART_u8ReadByteSyncBlocking (void)
{
    2108:	df 93       	push	r29
    210a:	cf 93       	push	r28
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
	// Wait for Rx Flag
	while(GET_BIT(UCSRA,7)==0);
    2110:	eb e2       	ldi	r30, 0x2B	; 43
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	88 23       	and	r24, r24
    2118:	dc f7       	brge	.-10     	; 0x2110 <MUART_u8ReadByteSyncBlocking+0x8>

	return UDR;
    211a:	ec e2       	ldi	r30, 0x2C	; 44
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
}
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	08 95       	ret

00002126 <MUART_u8ReadByteAsync>:

u8 MUART_u8ReadByteAsync (void)
{
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
	return UDR;
    212e:	ec e2       	ldi	r30, 0x2C	; 44
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
}
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <MUART_u8ReadByteSyncNonBlocking>:

u8 MUART_u8ReadByteSyncNonBlocking (void)
{
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	00 d0       	rcall	.+0      	; 0x2140 <MUART_u8ReadByteSyncNonBlocking+0x6>
    2140:	0f 92       	push	r0
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ReceivedData = NO_VALUE_RETURNED;
    2146:	8f ef       	ldi	r24, 0xFF	; 255
    2148:	8b 83       	std	Y+3, r24	; 0x03
	u16 local_u16Timeout = 0;
    214a:	1a 82       	std	Y+2, r1	; 0x02
    214c:	19 82       	std	Y+1, r1	; 0x01
    214e:	0b c0       	rjmp	.+22     	; 0x2166 <MUART_u8ReadByteSyncNonBlocking+0x2c>
	// Wait for Rx Flag
	while(GET_BIT(UCSRA,7)==0)
	{
		local_u16Timeout++;
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	9a 81       	ldd	r25, Y+2	; 0x02
    2154:	01 96       	adiw	r24, 0x01	; 1
    2156:	9a 83       	std	Y+2, r25	; 0x02
    2158:	89 83       	std	Y+1, r24	; 0x01
		if (local_u16Timeout == NON_BLOCKING_TIME_OUT)
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	9a 81       	ldd	r25, Y+2	; 0x02
    215e:	23 e1       	ldi	r18, 0x13	; 19
    2160:	88 38       	cpi	r24, 0x88	; 136
    2162:	92 07       	cpc	r25, r18
    2164:	29 f0       	breq	.+10     	; 0x2170 <MUART_u8ReadByteSyncNonBlocking+0x36>
u8 MUART_u8ReadByteSyncNonBlocking (void)
{
	u8 local_u8ReceivedData = NO_VALUE_RETURNED;
	u16 local_u16Timeout = 0;
	// Wait for Rx Flag
	while(GET_BIT(UCSRA,7)==0)
    2166:	eb e2       	ldi	r30, 0x2B	; 43
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	88 23       	and	r24, r24
    216e:	84 f7       	brge	.-32     	; 0x2150 <MUART_u8ReadByteSyncNonBlocking+0x16>
		{
			break;
		}
	}

	if (local_u16Timeout != NON_BLOCKING_TIME_OUT)
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	9a 81       	ldd	r25, Y+2	; 0x02
    2174:	23 e1       	ldi	r18, 0x13	; 19
    2176:	88 38       	cpi	r24, 0x88	; 136
    2178:	92 07       	cpc	r25, r18
    217a:	21 f0       	breq	.+8      	; 0x2184 <MUART_u8ReadByteSyncNonBlocking+0x4a>
	{
		// Read Received Data from the UDR
		local_u8ReceivedData = UDR;
    217c:	ec e2       	ldi	r30, 0x2C	; 44
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	80 81       	ld	r24, Z
    2182:	8b 83       	std	Y+3, r24	; 0x03
	}
	return local_u8ReceivedData;
    2184:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	cf 91       	pop	r28
    218e:	df 91       	pop	r29
    2190:	08 95       	ret

00002192 <MUART_voidSetCallBack>:



void MUART_voidSetCallBack (UART_INTERRUPTS_e A_InterruptSource , void (*A_PtoFunc)(void))
{
    2192:	df 93       	push	r29
    2194:	cf 93       	push	r28
    2196:	00 d0       	rcall	.+0      	; 0x2198 <MUART_voidSetCallBack+0x6>
    2198:	0f 92       	push	r0
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	89 83       	std	Y+1, r24	; 0x01
    21a0:	7b 83       	std	Y+3, r23	; 0x03
    21a2:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_InterruptSource<=UART_TX_INTERRUPT)&&(A_PtoFunc != NULL))
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	83 30       	cpi	r24, 0x03	; 3
    21a8:	80 f4       	brcc	.+32     	; 0x21ca <MUART_voidSetCallBack+0x38>
    21aa:	8a 81       	ldd	r24, Y+2	; 0x02
    21ac:	9b 81       	ldd	r25, Y+3	; 0x03
    21ae:	00 97       	sbiw	r24, 0x00	; 0
    21b0:	61 f0       	breq	.+24     	; 0x21ca <MUART_voidSetCallBack+0x38>
	{
		FuncPtr [A_InterruptSource] = A_PtoFunc;
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	88 2f       	mov	r24, r24
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	88 0f       	add	r24, r24
    21ba:	99 1f       	adc	r25, r25
    21bc:	fc 01       	movw	r30, r24
    21be:	e0 54       	subi	r30, 0x40	; 64
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	9b 81       	ldd	r25, Y+3	; 0x03
    21c6:	91 83       	std	Z+1, r25	; 0x01
    21c8:	80 83       	st	Z, r24
	}
}
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	08 95       	ret

000021d6 <__vector_13>:


void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    21d6:	1f 92       	push	r1
    21d8:	0f 92       	push	r0
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	0f 92       	push	r0
    21de:	11 24       	eor	r1, r1
    21e0:	2f 93       	push	r18
    21e2:	3f 93       	push	r19
    21e4:	4f 93       	push	r20
    21e6:	5f 93       	push	r21
    21e8:	6f 93       	push	r22
    21ea:	7f 93       	push	r23
    21ec:	8f 93       	push	r24
    21ee:	9f 93       	push	r25
    21f0:	af 93       	push	r26
    21f2:	bf 93       	push	r27
    21f4:	ef 93       	push	r30
    21f6:	ff 93       	push	r31
    21f8:	df 93       	push	r29
    21fa:	cf 93       	push	r28
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
	if (FuncPtr[UART_RX_INTERRUPT] != NULL)
    2200:	80 91 c0 00 	lds	r24, 0x00C0
    2204:	90 91 c1 00 	lds	r25, 0x00C1
    2208:	00 97       	sbiw	r24, 0x00	; 0
    220a:	29 f0       	breq	.+10     	; 0x2216 <__vector_13+0x40>
	{
		FuncPtr[UART_RX_INTERRUPT]();
    220c:	e0 91 c0 00 	lds	r30, 0x00C0
    2210:	f0 91 c1 00 	lds	r31, 0x00C1
    2214:	09 95       	icall
	}
}
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	ff 91       	pop	r31
    221c:	ef 91       	pop	r30
    221e:	bf 91       	pop	r27
    2220:	af 91       	pop	r26
    2222:	9f 91       	pop	r25
    2224:	8f 91       	pop	r24
    2226:	7f 91       	pop	r23
    2228:	6f 91       	pop	r22
    222a:	5f 91       	pop	r21
    222c:	4f 91       	pop	r20
    222e:	3f 91       	pop	r19
    2230:	2f 91       	pop	r18
    2232:	0f 90       	pop	r0
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	0f 90       	pop	r0
    2238:	1f 90       	pop	r1
    223a:	18 95       	reti

0000223c <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
    223c:	1f 92       	push	r1
    223e:	0f 92       	push	r0
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	0f 92       	push	r0
    2244:	11 24       	eor	r1, r1
    2246:	2f 93       	push	r18
    2248:	3f 93       	push	r19
    224a:	4f 93       	push	r20
    224c:	5f 93       	push	r21
    224e:	6f 93       	push	r22
    2250:	7f 93       	push	r23
    2252:	8f 93       	push	r24
    2254:	9f 93       	push	r25
    2256:	af 93       	push	r26
    2258:	bf 93       	push	r27
    225a:	ef 93       	push	r30
    225c:	ff 93       	push	r31
    225e:	df 93       	push	r29
    2260:	cf 93       	push	r28
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
	if (FuncPtr[UART_UDRE_INTERRUPT] != NULL)
    2266:	80 91 c2 00 	lds	r24, 0x00C2
    226a:	90 91 c3 00 	lds	r25, 0x00C3
    226e:	00 97       	sbiw	r24, 0x00	; 0
    2270:	29 f0       	breq	.+10     	; 0x227c <__vector_14+0x40>
	{
		FuncPtr[UART_UDRE_INTERRUPT]();
    2272:	e0 91 c2 00 	lds	r30, 0x00C2
    2276:	f0 91 c3 00 	lds	r31, 0x00C3
    227a:	09 95       	icall
	}
}
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	ff 91       	pop	r31
    2282:	ef 91       	pop	r30
    2284:	bf 91       	pop	r27
    2286:	af 91       	pop	r26
    2288:	9f 91       	pop	r25
    228a:	8f 91       	pop	r24
    228c:	7f 91       	pop	r23
    228e:	6f 91       	pop	r22
    2290:	5f 91       	pop	r21
    2292:	4f 91       	pop	r20
    2294:	3f 91       	pop	r19
    2296:	2f 91       	pop	r18
    2298:	0f 90       	pop	r0
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	0f 90       	pop	r0
    229e:	1f 90       	pop	r1
    22a0:	18 95       	reti

000022a2 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
    22a2:	1f 92       	push	r1
    22a4:	0f 92       	push	r0
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	0f 92       	push	r0
    22aa:	11 24       	eor	r1, r1
    22ac:	2f 93       	push	r18
    22ae:	3f 93       	push	r19
    22b0:	4f 93       	push	r20
    22b2:	5f 93       	push	r21
    22b4:	6f 93       	push	r22
    22b6:	7f 93       	push	r23
    22b8:	8f 93       	push	r24
    22ba:	9f 93       	push	r25
    22bc:	af 93       	push	r26
    22be:	bf 93       	push	r27
    22c0:	ef 93       	push	r30
    22c2:	ff 93       	push	r31
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
	if (FuncPtr[UART_TX_INTERRUPT] != NULL)
    22cc:	80 91 c4 00 	lds	r24, 0x00C4
    22d0:	90 91 c5 00 	lds	r25, 0x00C5
    22d4:	00 97       	sbiw	r24, 0x00	; 0
    22d6:	29 f0       	breq	.+10     	; 0x22e2 <__vector_15+0x40>
	{
		FuncPtr[UART_TX_INTERRUPT]();
    22d8:	e0 91 c4 00 	lds	r30, 0x00C4
    22dc:	f0 91 c5 00 	lds	r31, 0x00C5
    22e0:	09 95       	icall
	}
}
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	ff 91       	pop	r31
    22e8:	ef 91       	pop	r30
    22ea:	bf 91       	pop	r27
    22ec:	af 91       	pop	r26
    22ee:	9f 91       	pop	r25
    22f0:	8f 91       	pop	r24
    22f2:	7f 91       	pop	r23
    22f4:	6f 91       	pop	r22
    22f6:	5f 91       	pop	r21
    22f8:	4f 91       	pop	r20
    22fa:	3f 91       	pop	r19
    22fc:	2f 91       	pop	r18
    22fe:	0f 90       	pop	r0
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	0f 90       	pop	r0
    2304:	1f 90       	pop	r1
    2306:	18 95       	reti

00002308 <__mulsi3>:
    2308:	62 9f       	mul	r22, r18
    230a:	d0 01       	movw	r26, r0
    230c:	73 9f       	mul	r23, r19
    230e:	f0 01       	movw	r30, r0
    2310:	82 9f       	mul	r24, r18
    2312:	e0 0d       	add	r30, r0
    2314:	f1 1d       	adc	r31, r1
    2316:	64 9f       	mul	r22, r20
    2318:	e0 0d       	add	r30, r0
    231a:	f1 1d       	adc	r31, r1
    231c:	92 9f       	mul	r25, r18
    231e:	f0 0d       	add	r31, r0
    2320:	83 9f       	mul	r24, r19
    2322:	f0 0d       	add	r31, r0
    2324:	74 9f       	mul	r23, r20
    2326:	f0 0d       	add	r31, r0
    2328:	65 9f       	mul	r22, r21
    232a:	f0 0d       	add	r31, r0
    232c:	99 27       	eor	r25, r25
    232e:	72 9f       	mul	r23, r18
    2330:	b0 0d       	add	r27, r0
    2332:	e1 1d       	adc	r30, r1
    2334:	f9 1f       	adc	r31, r25
    2336:	63 9f       	mul	r22, r19
    2338:	b0 0d       	add	r27, r0
    233a:	e1 1d       	adc	r30, r1
    233c:	f9 1f       	adc	r31, r25
    233e:	bd 01       	movw	r22, r26
    2340:	cf 01       	movw	r24, r30
    2342:	11 24       	eor	r1, r1
    2344:	08 95       	ret

00002346 <__udivmodsi4>:
    2346:	a1 e2       	ldi	r26, 0x21	; 33
    2348:	1a 2e       	mov	r1, r26
    234a:	aa 1b       	sub	r26, r26
    234c:	bb 1b       	sub	r27, r27
    234e:	fd 01       	movw	r30, r26
    2350:	0d c0       	rjmp	.+26     	; 0x236c <__udivmodsi4_ep>

00002352 <__udivmodsi4_loop>:
    2352:	aa 1f       	adc	r26, r26
    2354:	bb 1f       	adc	r27, r27
    2356:	ee 1f       	adc	r30, r30
    2358:	ff 1f       	adc	r31, r31
    235a:	a2 17       	cp	r26, r18
    235c:	b3 07       	cpc	r27, r19
    235e:	e4 07       	cpc	r30, r20
    2360:	f5 07       	cpc	r31, r21
    2362:	20 f0       	brcs	.+8      	; 0x236c <__udivmodsi4_ep>
    2364:	a2 1b       	sub	r26, r18
    2366:	b3 0b       	sbc	r27, r19
    2368:	e4 0b       	sbc	r30, r20
    236a:	f5 0b       	sbc	r31, r21

0000236c <__udivmodsi4_ep>:
    236c:	66 1f       	adc	r22, r22
    236e:	77 1f       	adc	r23, r23
    2370:	88 1f       	adc	r24, r24
    2372:	99 1f       	adc	r25, r25
    2374:	1a 94       	dec	r1
    2376:	69 f7       	brne	.-38     	; 0x2352 <__udivmodsi4_loop>
    2378:	60 95       	com	r22
    237a:	70 95       	com	r23
    237c:	80 95       	com	r24
    237e:	90 95       	com	r25
    2380:	9b 01       	movw	r18, r22
    2382:	ac 01       	movw	r20, r24
    2384:	bd 01       	movw	r22, r26
    2386:	cf 01       	movw	r24, r30
    2388:	08 95       	ret

0000238a <__prologue_saves__>:
    238a:	2f 92       	push	r2
    238c:	3f 92       	push	r3
    238e:	4f 92       	push	r4
    2390:	5f 92       	push	r5
    2392:	6f 92       	push	r6
    2394:	7f 92       	push	r7
    2396:	8f 92       	push	r8
    2398:	9f 92       	push	r9
    239a:	af 92       	push	r10
    239c:	bf 92       	push	r11
    239e:	cf 92       	push	r12
    23a0:	df 92       	push	r13
    23a2:	ef 92       	push	r14
    23a4:	ff 92       	push	r15
    23a6:	0f 93       	push	r16
    23a8:	1f 93       	push	r17
    23aa:	cf 93       	push	r28
    23ac:	df 93       	push	r29
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62
    23b2:	ca 1b       	sub	r28, r26
    23b4:	db 0b       	sbc	r29, r27
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	de bf       	out	0x3e, r29	; 62
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	cd bf       	out	0x3d, r28	; 61
    23c0:	09 94       	ijmp

000023c2 <__epilogue_restores__>:
    23c2:	2a 88       	ldd	r2, Y+18	; 0x12
    23c4:	39 88       	ldd	r3, Y+17	; 0x11
    23c6:	48 88       	ldd	r4, Y+16	; 0x10
    23c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    23ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    23cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    23ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    23d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    23d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    23d4:	b9 84       	ldd	r11, Y+9	; 0x09
    23d6:	c8 84       	ldd	r12, Y+8	; 0x08
    23d8:	df 80       	ldd	r13, Y+7	; 0x07
    23da:	ee 80       	ldd	r14, Y+6	; 0x06
    23dc:	fd 80       	ldd	r15, Y+5	; 0x05
    23de:	0c 81       	ldd	r16, Y+4	; 0x04
    23e0:	1b 81       	ldd	r17, Y+3	; 0x03
    23e2:	aa 81       	ldd	r26, Y+2	; 0x02
    23e4:	b9 81       	ldd	r27, Y+1	; 0x01
    23e6:	ce 0f       	add	r28, r30
    23e8:	d1 1d       	adc	r29, r1
    23ea:	0f b6       	in	r0, 0x3f	; 63
    23ec:	f8 94       	cli
    23ee:	de bf       	out	0x3e, r29	; 62
    23f0:	0f be       	out	0x3f, r0	; 63
    23f2:	cd bf       	out	0x3d, r28	; 61
    23f4:	ed 01       	movw	r28, r26
    23f6:	08 95       	ret

000023f8 <_exit>:
    23f8:	f8 94       	cli

000023fa <__stop_program>:
    23fa:	ff cf       	rjmp	.-2      	; 0x23fa <__stop_program>
